.. status: ok



9.39 LexTriangularPackage
-------------------------

The LexTriangularPackage package constructor provides an implementation
of the lexTriangular algorithm (D. Lazard Solving Zero-dimensional
Algebraic Systems, J. of Symbol. Comput., 1992). This algorithm
decomposes a zero-dimensional variety into zero-sets of regular
triangular sets. Thus the input system must have a finite number of
complex solutions. Moreover, this system needs to be a lexicographical
Groebner basis.

This package takes two arguments: the coefficient-ring R of the
polynomials, which must be a GcdDomain and their set of variables given
by ls a List Symbol. The type of the input polynomials must be
NewSparseMultivariatePolynomial(R,V) where V is OrderedVariableList(ls).
The abbreviation for LexTriangularPackage is LEXTRIPK. The main
operations are lexTriangularlexTriangularLexTriangularPackage and
squareFreeLexTriangularsquareFreeLexTriangularLexTriangularPackage. The
later provide decompositions by means of square-free regular triangular
sets, built with the SREGSET constructor, whereas the former uses the
REGSET constructor. Note that these constructors also implement another
algorithm for solving algebraic systems by means of regular triangular
sets; in that case no computations of Groebner bases are needed and the
input system may have any dimension (i.e. it may have an infinite number
of solutions).

The implementation of the lexTriangular algorithm provided in the
LexTriangularPackage constructor differs from that reported in
Computations of gcd over algebraic towers of simple extensions by M.
Moreno Maza and R. Rioboo (in proceedings of AAECC11, Paris, 1995).
Indeed, the
squareFreeLexTriangularsquareFreeLexTriangularLexTriangularPackage
operation removes all multiplicities of the solutions (i.e. the computed
solutions are pairwise different) and the
lexTriangularlexTriangularLexTriangularPackage operation may keep some
multiplicities; this later operation runs generally faster than the
former.

The interest of the lexTriangular algorithm is due to the following
experimental remark. For some examples, a triangular decomposition of a
zero-dimensional variety can be computed faster via a lexicographical
Groebner basis computation than by using a direct method (like that of
SREGSET and REGSET). This happens typically when the total degree of the
system relies essentially on its smallest variable (like in the Katsura
systems). When this is not the case, the direct method may give better
timings (like in the Rose system).

Of course, the direct method can also be applied to a lexicographical
Groebner basis. However, the lexTriangular algorithm takes advantage of
the structure of this basis and avoids many unnecessary computations
which are performed by the direct method.

For this purpose of solving algebraic systems with a finite number of
solutions, see also the ZeroDimensionalSolvePackage. It allows to use
both strategies (the lexTriangular algorithm and the direct method) for
computing either the complex or real roots of a system.

Note that the way of understanding triangular decompositions is detailed
in the example of the RegularTriangularSet constructor.

Since the LEXTRIPK package constructor is limited to zero-dimensional
systems, it provides a
zeroDimensional?zeroDimensional?LexTriangularPackage operation to check
whether this requirement holds. There is also a
groebnergroebnerLexTriangularPackage operation to compute the
lexicographical Groebner basis of a set of polynomials with type
NewSparseMultivariatePolynomial(R,V). The elimination ordering is that
given by ls (the greatest variable being the first element of ls). This
basis is computed by the FLGM algorithm (Faugere et al. Efficient
Computation of Zero-Dimensional Groebner Bases by Change of Ordering ,
J. of Symbol. Comput., 1993) implemented in the LinGroebnerPackage
package constructor. Once a lexicographical Groebner basis is computed,
then one can call the operations
lexTriangularlexTriangularLexTriangularPackage and
squareFreeLexTriangularsquareFreeLexTriangularLexTriangularPackage. Note
that these operations admit an optional argument to produce normalized
triangular sets. There is also a
zeroSetSplitzeroSetSplitLexTriangularPackage operation which does all
the job from the input system; an error is produced if this system is
not zero-dimensional.

Let us illustrate the facilities of the LEXTRIPK constructor by a famous
example, the cyclic-6 root system.

Define the coefficient ring.


.. spadInput
::

	R := Integer


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------+
| Integer   |
+-----------+




.. spadType

:sub:`Type: Domain`



Define the list of variables,


.. spadInput
::

	ls : List Symbol := [a,b,c,d,e,f]


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------+
| [a,b,c,d,e,f]   |
+-----------------+




.. spadType

:sub:`Type: List Symbol`



and make it an ordered set.


.. spadInput
::

	V := OVAR(ls)


.. spadMathAnswer
.. spadMathOutput
.. math::

+------------------------------------+
| OrderedVariableList[a,b,c,d,e,f]   |
+------------------------------------+




.. spadType

:sub:`Type: Domain`



Define the polynomial ring.


.. spadInput
::

	P := NSMP(R, V)


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------------------------------------------------------------------+
| NewSparseMultivariatePolynomial(Integer,OrderedVariableList[a,b,c,d,e,f])   |
+-----------------------------------------------------------------------------+




.. spadType

:sub:`Type: Domain`



Define the polynomials.


.. spadInput
::

	p1: P := a*b*c*d*e*f - 1


.. spadMathAnswer
.. spadMathOutput
.. math::

+------------+
| fedcba-1   |
+------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	p2: P := a*b*c*d*e +a*b*c*d*f +a*b*c*e*f +a*b*d*e*f
+a*c*d*e*f +b*c*d*e*f


.. spadMathAnswer
.. spadMathOutput
.. math::

+-------------------------------------+
| ((((e+f)d+fe)c+fed)b+fedc)a+fedcb   |
+-------------------------------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	p3: P := a*b*c*d + a*b*c*f + a*b*e*f + a*d*e*f + b*c*d*e
+ c*d*e*f


.. spadMathAnswer
.. spadMathOutput
.. math::

+---------------------------------+
| (((d+f)c+fe)b+fed)a+edcb+fedc   |
+---------------------------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	p4: P := a*b*c + a*b*f + a*e*f + b*c*d + c*d*e + d*e*f


.. spadMathAnswer
.. spadMathOutput
.. math::

+----------------------------+
| ((c+f)b+fe)a+dcb+edc+fed   |
+----------------------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	p5: P := a*b + a*f + b*c + c*d + d*e + e*f


.. spadMathAnswer
.. spadMathOutput
.. math::

+----------------------+
| (b+f)a+cb+dc+ed+fe   |
+----------------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	p6: P := a + b + c + d + e + f


.. spadMathAnswer
.. spadMathOutput
.. math::

+---------------+
| a+b+c+d+e+f   |
+---------------+




.. spadType

:sub:`Type: NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])




.. spadInput
::

	lp := [p1, p2, p3, p4, p5, p6]


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------------------------------------------------------------------------------------------------------------------------------+
| [fedcba-1,((((e+f)d+fe)c+fed)b+fedc)a+fedcb,(((d+f)c+fe)b+fed)a+edcb+fedc,((c+f)b+fe)a+dcb+edc+fed,(b+f)a+cb+dc+ed+fe,a+b+c+d+e+f]   |
+--------------------------------------------------------------------------------------------------------------------------------------+




.. spadType

:sub:`Type: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])



Now call LEXTRIPK .


.. spadInput
::

	lextripack := LEXTRIPK(R,ls)


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------------------------------------+
| LexTriangularPackage(Integer,[a,b,c,d,e,f])   |
+-----------------------------------------------+




.. spadType

:sub:`Type: Domain`



Compute the lexicographical Groebner basis of the system. This may take
between 5 minutes and one hour, depending on your machine.


.. spadInput
::

	lg := groebner(lp)$lextripack


.. spadMathAnswer
.. spadMathOutput
.. math::


| [a+b+c+d+e+f,3968379498283200b2+15873517993132800fb+3968379498283200d2+15873517993132800fd+3968379498283200f3e5-15873517993132800f4e4+23810276989699200f5e3+(206355733910726400f6+230166010900425600)e2+(-729705987316687f43+1863667496867205421f37+291674853771731104461f31+365285994691106921745f25+549961185828911895f19-365048404038768439269f13-292382820431504027669f7-2271898467631865497f)e-3988812642545399f44+10187423878429609997f38+1594377523424314053637f32+1994739308439916238065f26+1596840088052642815f20-1993494118301162145413f14-1596049742289689815053f8-11488171330159667449f2,(23810276989699200c-23810276989699200f)b+23810276989699200c2+71430830969097600fc-23810276989699200d2-95241107958796800fd-55557312975964800f3e5+174608697924460800f4e4-174608697924460800f5e3+(-2428648252949318400f6-2611193709870345600)e2+(8305444561289527f43-21212087151945459641f37-3319815883093451385381f31-4157691646261657136445f25-6072721607510764095f19+4154986709036460221649f13+3327761311138587096749f7+25885340608290841637f)e+45815897629010329f44-117013765582151891207f38-18313166848970865074187f32-22909971239649297438915f26-16133250761305157265f20+22897305857636178256623f14+18329944781867242497923f8+130258531002020420699f2,(7936758996566400d-7936758996566400f)b-7936758996566400fd-7936758996566400f3e5+23810276989699200f4e4-23810276989699200f5e3+(-337312257354072000f6-369059293340337600)e2+(1176345388640471f43-3004383582891473073f37-470203502707246105653f31-588858183402644348085f25-856939308623513535f19+588472674242340526377f13+471313241958371103517f7+3659742549078552381f)e+6423170513956901f44-16404772137036480803f38-2567419165227528774463f32-3211938090825682172335f26-2330490332697587485f20+3210100109444754864587f14+2569858315395162617847f8+18326089487427735751f2,(11905138494849600e-11905138494849600f)b-3968379498283200f3e5+15873517993132800f4e4-27778656487982400f5e3+(-208339923659868000f6-240086959646133600)e2+(786029984751110f43-2007519008182245250f37-314188062908073807090f31-393423667537929575250f25-550329120654394950f19+393196408728889612770f13+314892372799176495730f7+2409386515146668530f)e+4177638546747827f44-10669685294602576381f38-1669852980419949524601f32-2089077057287904170745f26-1569899763580278795f20+2087864026859015573349f14+1671496085945199577969f8+11940257226216280177f2,(11905138494849600f6-11905138494849600)b-15873517993132800f2e5+39683794982832000f3e4-39683794982832000f4e3+(-686529653202993600f11-607162063237329600f5)e2+(65144531306704f42-166381280901088652f36-26033434502470283472f30-31696259583860650140f24+971492093167581360f18+32220085033691389548f12+25526177666070529808f6+138603268355749244)e+167620036074811f43-428102417974791473f37-66997243801231679313f31-83426716722148750485f25+203673895369980765f19+83523056326010432457f13+66995789640238066937f7+478592855549587901f,801692827936c3+2405078483808fc2-2405078483808f2c-13752945467f45+35125117815561f39+5496946957826433f33+6834659447749117f27-44484880462461f21-6873406230093057f15-5450844938762633f9+1216586044571f3,(23810276989699200d-23810276989699200f)c+23810276989699200d2+71430830969097600fd+7936758996566400f3e5-31747035986265600f4e4+31747035986265600f5e3+(404774708824886400f6+396837949828320000)e2+(-1247372229446701f43+3185785654596621203f37+498594866849974751463f31+624542545845791047935f25+931085755769682885f19-624150663582417063387f13-499881859388360475647f7-3926885313819527351f)e-7026011547118141f44+17944427051950691243f38+2808383522593986603543f32+3513624142354807530135f26+2860757006705537685f20-3511356735642190737267f14-2811332494697103819887f8-20315011631522847311f2,(7936758996566400e-7936758996566400f)c+(-4418748183673f43+11285568707456559f37+1765998617294451019f31+2173749283622606155f25-55788292195402895f19-2215291421788292951f13-1718142665347430851f7+30256569458230237f)e+4418748183673f44-11285568707456559f38-1765998617294451019f32-2173749283622606155f26+55788292195402895f20+2215291421788292951f14+1718142665347430851f8-30256569458230237f2,(72152354514240f6-72152354514240)c+40950859449f43-104588980990367f37-16367227395575307f31-20268523416527355f25+442205002259535f19+20576059935789063f13+15997133796970563f7-275099892785581f,1984189749141600d3+5952569247424800fd2-5952569247424800f2d-3968379498283200f4e5+15873517993132800f5e4+17857707742274400e3+(-148814231185620000f7-162703559429611200f)e2+(-390000914678878f44+996062704593756434f38+155886323972034823914f32+194745956143985421330f26+6205077595574430f20-194596512653299068786f14-155796897940756922666f8-1036375759077320978f2)e-374998630035991f45+957747106595453993f39+149889155566764891693f33+187154171443494641685f27-127129015426348065f21-187241533243115040417f15-149719983567976534037f9-836654081239648061f3,(5952569247424800e-5952569247424800f)d-3968379498283200f3e5+9920948745708000f4e4-3968379498283200f5e3+(-148814231185620000f6-150798420934761600)e2+(492558110242553f43-1257992359608074599f37-196883094539368513959f31-246562115745735428055f25-325698701993885505f19+246417769883651808111f13+197327352068200652911f7+1523373796389332143f)e+2679481081803026f44-6843392695421906608f38-1071020459642646913578f32-1339789169692041240060f26-852746750910750210f20+1339105101971878401312f14+1071900289758712984762f8+7555239072072727756f2,(11905138494849600f6-11905138494849600)d-7936758996566400f2e5+31747035986265600f3e4-31747035986265600f4e3+(-420648226818019200f11-404774708824886400f5)e2+(15336187600889f42-39169739565161107f36-6127176127489690827f30-7217708742310509615f24+538628483890722735f18+7506804353843507643f12+5886160769782607203f6+63576108396535879)e+71737781777066f43-183218856207557938f37-28672874271132276078f31-35625223686939812010f25+164831339634084390f19+35724160423073052642f13+28627022578664910622f7+187459987029680506f,1322793166094400e6-3968379498283200fe5+3968379498283200f2e4-5291172664377600f3e3+(-230166010900425600f10-226197631402142400f4)e2+(-152375364610443885f47+389166626064854890415f41+60906097841360558987335f35+76167367934608798697275f29+27855066785995181125f23-76144952817052723145495f17-60933629892463517546975f11-411415071682002547795f5)e-209493533143822f42+535045979490560586f36+83737947964973553146f30+104889507084213371570f24+167117997269207870f18-104793725781390615514f12-83842685189903180394f6-569978796672974242,(25438330117200f6+25438330117200)e3+(76314990351600f7+76314990351600f)e2+(-1594966552735f44+4073543370415745f38+637527159231148925f32+797521176113606525f26+530440941097175f20-797160527306433145f14-638132320196044965f8-4510507167940725f2)e-6036376800443f45+15416903421476909f39+2412807646192304449f33+3017679923028013705f27+1422320037411955f21-3016560402417843941f15-2414249368183033161f9-16561862361763873f3,(1387545279120f12-1387545279120)e2+(4321823003f43-11037922310209f37-1727510711947989f31-2165150991154425f25-5114342560755f19+2162682824948601f13+1732620732685741f7+13506088516033f)e+24177661775f44-61749727185325f38-9664106795754225f32-12090487758628245f26-8787672733575f20+12083693383005045f14+9672870290826025f8+68544102808525f2,f48-2554f42-399710f36-499722f30+499722f18+399710f12+2554f6-1]   |





.. spadType

:sub:`Type: List NewSparseMultivariatePolynomial(Integer,OrderedVariableList`
[a,b,c,d,e,f])



Apply lexTriangular to compute a decomposition into regular triangular
sets. This should not take more than 5 seconds.


.. spadInput
::

	lexTriangular(lg,false)$lextripack


.. spadMathAnswer
.. spadMathOutput
.. math::


| [{f6+1,e6-3fe5+3f2e4-4f3e3+3f4e2-3f5e-1,3d+f2e5-4f3e4+4f4e3-2f5e2-2e+2f,c+f,3b+2f2e5-5f3e4+5f4e3-10f5e2-4e+7f,a-f2e5+3f3e4-3f4e3+4f5e2+3e-3f},{f6-1,e-f,d-f,c2+4fc+f2,(c-f)b-fc-5f2,a+b+c+3f},{f6-1,e-f,d-f,c-f,b2+4fb+f2,a+b+4f},{f6-1,e-f,d2+4fd+f2,(d-f)c-fd-5f2,b-f,a+c+d+3f},{f36-2554f30-399709f24-502276f18-399709f12-2554f6+1,(161718564f12-161718564)e2+(-504205f31+1287737951f25+201539391380f19+253982817368f13+201940704665f7+1574134601f)e-2818405f32+7198203911f26+1126548149060f20+1416530563364f14+1127377589345f8+7988820725f2,(693772639560f6-693772639560)d-462515093040f2e5+1850060372160f3e4-1850060372160f4e3+(-24513299931120f11-23588269745040f5)e2+(-890810428f30+2275181044754f24+355937263869776f18+413736880104344f12+342849304487996f6+3704966481878)e-4163798003f31+10634395752169f25+1664161760192806f19+2079424391370694f13+1668153650635921f7+10924274392693f,(12614047992f6-12614047992)c-7246825f31+18508536599f25+2896249516034f19+3581539649666f13+2796477571739f7-48094301893f,(693772639560f6-693772639560)b-925030186080f2e5+2312575465200f3e4-2312575465200f4e3+(-40007555547960f11-35382404617560f5)e2+(-3781280823f30+9657492291789f24+1511158913397906f18+1837290892286154f12+1487216006594361f6+8077238712093)e-9736390478f31+24866827916734f25+3891495681905296f19+4872556418871424f13+3904047887269606f7+27890075838538f,a+b+c+d+e+f},{f6-1,e2+4fe+f2,(e-f)d-fe-5f2,c-f,b-f,a+d+e+3f}]   |





.. spadType

:sub:`Type: List RegularChain(Integer,[a,b,c,d,e,f])`



Note that the first set of the decomposition is normalized (all initials
are integer numbers) but not the second one (normalized triangular sets
are defined in the description of the NormalizedTriangularSetCategory
constructor).

So apply now lexTriangular to produce normalized triangular sets.


.. spadInput
::

	lts := lexTriangular(lg,true)$lextripack


.. spadMathAnswer
.. spadMathOutput
.. math::

+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [{f6+1,e6-3fe5+3f2e4-4f3e3+3f4e2-3f5e-1,3d+f2e5-4f3e4+4f4e3-2f5e2-2e+2f,c+f,3b+2f2e5-5f3e4+5f4e3-10f5e2-4e+7f,a-f2e5+3f3e4-3f4e3+4f5e2+3e-3f},{f6-1,e-f,d-f,c2+4fc+f2,b+c+4f,a-f},{f6-1,e-f,d-f,c-f,b2+4fb+f2,a+b+4f},{f6-1,e-f,d2+4fd+f2,c+d+4f,b-f,a-f},{f36-2554f30-399709f24-502276f18-399709f12-2554f6+1,1387545279120e2+(4321823003f31-11037922310209f25-1727506390124986f19-2176188913464634f13-1732620732685741f7-13506088516033f)e+24177661775f32-61749727185325f26-9664082618092450f20-12152237485813570f14-9672870290826025f8-68544102808525f2,1387545279120d+(-1128983050f30+2883434331830f24+451234998755840f18+562426491685760f12+447129055314890f6-165557857270)e-1816935351f31+4640452214013f25+726247129626942f19+912871801716798f13+726583262666877f7+4909358645961f,1387545279120c+778171189f31-1987468196267f25-310993556954378f19-383262822316802f13-300335488637543f7+5289595037041f,1387545279120b+(1128983050f30-2883434331830f24-451234998755840f18-562426491685760f12-447129055314890f6+165557857270)e-3283058841f31+8384938292463f25+1312252817452422f19+1646579934064638f13+1306372958656407f7+4694680112151f,1387545279120a+1387545279120e+4321823003f31-11037922310209f25-1727506390124986f19-2176188913464634f13-1732620732685741f7-13506088516033f},{f6-1,e2+4fe+f2,d+e+4f,c-f,b-f,a-f}]   |





.. spadType

:sub:`Type: List RegularChain(Integer,[a,b,c,d,e,f])`



We check that all initials are constant.


.. spadInput
::

	[ [init(p) for p in (ts :: List(P))] for ts in lts]


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------------------------------------------------------------------------------------------------------------------------------------------+
| [[1,3,1,3,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1387545279120,1387545279120,1387545279120,1387545279120,1387545279120,1],[1,1,1,1,1,1]]   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+




.. spadType

:sub:`Type: List List`
NewSparseMultivariatePolynomial(Integer,OrderedVariableList
[a,b,c,d,e,f])



Note that each triangular set in lts is a lexicographical Groebner
basis. Recall that a point belongs to the variety associated with lp if
and only if it belongs to that associated with one triangular set ts in
lts.

By running the
squareFreeLexTriangularsquareFreeLexTriangularLexTriangularPackage
operation, we retrieve the above decomposition.


.. spadInput
::

	squareFreeLexTriangular(lg,true)$lextripack


.. spadMathAnswer
.. spadMathOutput
.. math::


| [{f6+1,e6-3fe5+3f2e4-4f3e3+3f4e2-3f5e-1,3d+f2e5-4f3e4+4f4e3-2f5e2-2e+2f,c+f,3b+2f2e5-5f3e4+5f4e3-10f5e2-4e+7f,a-f2e5+3f3e4-3f4e3+4f5e2+3e-3f},{f6-1,e-f,d-f,c2+4fc+f2,b+c+4f,a-f},{f6-1,e-f,d-f,c-f,b2+4fb+f2,a+b+4f},{f6-1,e-f,d2+4fd+f2,c+d+4f,b-f,a-f},{f36-2554f30-399709f24-502276f18-399709f12-2554f6+1,1387545279120e2+(4321823003f31-11037922310209f25-1727506390124986f19-2176188913464634f13-1732620732685741f7-13506088516033f)e+24177661775f32-61749727185325f26-9664082618092450f20-12152237485813570f14-9672870290826025f8-68544102808525f2,1387545279120d+(-1128983050f30+2883434331830f24+451234998755840f18+562426491685760f12+447129055314890f6-165557857270)e-1816935351f31+4640452214013f25+726247129626942f19+912871801716798f13+726583262666877f7+4909358645961f,1387545279120c+778171189f31-1987468196267f25-310993556954378f19-383262822316802f13-300335488637543f7+5289595037041f,1387545279120b+(1128983050f30-2883434331830f24-451234998755840f18-562426491685760f12-447129055314890f6+165557857270)e-3283058841f31+8384938292463f25+1312252817452422f19+1646579934064638f13+1306372958656407f7+4694680112151f,1387545279120a+1387545279120e+4321823003f31-11037922310209f25-1727506390124986f19-2176188913464634f13-1732620732685741f7-13506088516033f},{f6-1,e2+4fe+f2,d+e+4f,c-f,b-f,a-f}]   |





.. spadType

:sub:`Type: List SquareFreeRegularTriangularSet(Integer,IndexedExponents`
OrderedVariableList [a,b,c,d,e,f],OrderedVariableList
[a,b,c,d,e,f],NewSparseMultivariatePolynomial(Integer,OrderedVariableList
[a,b,c,d,e,f]))



Thus the solutions given by lts are pairwise different.

We count them as follows.


.. spadInput
::

	reduce(+,[degree(ts) for ts in lts])


.. spadMathAnswer
.. spadMathOutput
.. math::

+-------+
| 156   |
+-------+




.. spadType

:sub:`Type: PositiveInteger`



We can investigate the triangular decomposition lts by using the
ZeroDimensionalSolvePackage.

This requires to add an extra variable (smaller than the others) as
follows.


.. spadInput
::

	ls2 : List Symbol := concat(ls,new()$Symbol)


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------------+
| [a,b,c,d,e,f,%A]   |
+--------------------+




.. spadType

:sub:`Type: List Symbol`



Then we call the package.


.. spadInput
::

	zdpack := ZDSOLVE(R,ls,ls2)


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------------------------------------------------------------+
| ZeroDimensionalSolvePackage(Integer,[a,b,c,d,e,f],[a,b,c,d,e,f,%A])   |
+-----------------------------------------------------------------------+




.. spadType

:sub:`Type: Domain`



We compute a univariate representation of the variety associated with
the input system as follows.


.. spadInput
::

	concat [univariateSolve(ts)$zdpack for ts in lts]


.. spadMathAnswer
.. spadMathOutput
.. math::

+---------------------------------------------------------------------------------------------------------------------+
| [[complexRoots=?4-13?2+49,coordinates=[7a+%A3-6%A,21b+%A3+%A,21c-2%A3+19%A,7d-%A3+6%A,21e-%A3-%A,21f+2%A3-19%A]],   |
+---------------------------------------------------------------------------------------------------------------------+



[complexRoots=?4+11?2+49,coordinates=[35a+3%A3+19%A,35b+%A3+18%A,35c-2%A3-%A,35d-3%A3-19%A,35e-%A3-18%A,35f+2%A3+%A]],
[complexRoots=?8-12?7+58?6-120?5+207?4-360?3+802?2-1332?+1369,coordinates=[43054532a+33782%A7-546673%A6+3127348%A5-6927123%A4+4365212%A3-25086957%A2+39582814%A-107313172,43054532b-33782%A7+546673%A6-3127348%A5+6927123%A4-4365212%A3+25086957%A2-39582814%A+107313172,21527266c-22306%A7+263139%A6-1166076%A5+1821805%A4-2892788%A3+10322663%A2-9026596%A+12950740,43054532d+22306%A7-263139%A6+1166076%A5-1821805%A4+2892788%A3-10322663%A2+30553862%A-12950740,43054532e-22306%A7+263139%A6-1166076%A5+1821805%A4-2892788%A3+10322663%A2-30553862%A+12950740,21527266f+22306%A7-263139%A6+1166076%A5-1821805%A4+2892788%A3-10322663%A2+9026596%A-12950740]],
[complexRoots=?8+12?7+58?6+120?5+207?4+360?3+802?2+1332?+1369,coordinates=[43054532a+33782%A7+546673%A6+3127348%A5+6927123%A4+4365212%A3+25086957%A2+39582814%A+107313172,43054532b-33782%A7-546673%A6-3127348%A5-6927123%A4-4365212%A3-25086957%A2-39582814%A-107313172,21527266c-22306%A7-263139%A6-1166076%A5-1821805%A4-2892788%A3-10322663%A2-9026596%A-12950740,43054532d+22306%A7+263139%A6+1166076%A5+1821805%A4+2892788%A3+10322663%A2+30553862%A+12950740,43054532e-22306%A7-263139%A6-1166076%A5-1821805%A4-2892788%A3-10322663%A2-30553862%A-12950740,21527266f+22306%A7+263139%A6+1166076%A5+1821805%A4+2892788%A3+10322663%A2+9026596%A+12950740]],
[complexRoots=?4-?2+1,coordinates=[a-%A,b+%A3-%A,c+%A3,d+%A,e-%A3+%A,f-%A3]],
[complexRoots=?8+4?6+12?4+16?2+4,coordinates=[4a-2%A7-7%A5-20%A3-22%A,4b+2%A7+7%A5+20%A3+22%A,4c+%A7+3%A5+10%A3+10%A,4d+%A7+3%A5+10%A3+6%A,4e-%A7-3%A5-10%A3-6%A,4f-%A7-3%A5-10%A3-10%A]],
[complexRoots=?4+6?3+30?2+36?+36,coordinates=[30a-%A3-5%A2-30%A-6,6b+%A3+5%A2+24%A+6,30c-%A3-5%A2-6,30d-%A3-5%A2-30%A-6,30e-%A3-5%A2-30%A-6,30f-%A3-5%A2-30%A-6]],
[complexRoots=?4-6?3+30?2-36?+36,coordinates=[30a-%A3+5%A2-30%A+6,6b+%A3-5%A2+24%A-6,30c-%A3+5%A2+6,30d-%A3+5%A2-30%A+6,30e-%A3+5%A2-30%A+6,30f-%A3+5%A2-30%A+6]],
[complexRoots=?2+6?+6,coordinates=[a+1,b-%A-5,c+%A+1,d+1,e+1,f+1]],
[complexRoots=?2-6?+6,coordinates=[a-1,b-%A+5,c+%A-1,d-1,e-1,f-1]],
[complexRoots=?4+6?3+30?2+36?+36,coordinates=[6a+%A3+5%A2+24%A+6,30b-%A3-5%A2-6,30c-%A3-5%A2-30%A-6,30d-%A3-5%A2-30%A-6,30e-%A3-5%A2-30%A-6,30f-%A3-5%A2-30%A-6]],
[complexRoots=?4-6?3+30?2-36?+36,coordinates=[6a+%A3-5%A2+24%A-6,30b-%A3+5%A2+6,30c-%A3+5%A2-30%A+6,30d-%A3+5%A2-30%A+6,30e-%A3+5%A2-30%A+6,30f-%A3+5%A2-30%A+6]],
[complexRoots=?2+6?+6,coordinates=[a-%A-5,b+%A+1,c+1,d+1,e+1,f+1]],
[complexRoots=?2-6?+6,coordinates=[a-%A+5,b+%A-1,c-1,d-1,e-1,f-1]],
[complexRoots=?4+6?3+30?2+36?+36,coordinates=[30a-%A3-5%A2-30%A-6,30b-%A3-5%A2-30%A-6,6c+%A3+5%A2+24%A+6,30d-%A3-5%A2-6,30e-%A3-5%A2-30%A-6,30f-%A3-5%A2-30%A-6]],
[complexRoots=?4-6?3+30?2-36?+36,coordinates=[30a-%A3+5%A2-30%A+6,30b-%A3+5%A2-30%A+6,6c+%A3-5%A2+24%A-6,30d-%A3+5%A2+6,30e-%A3+5%A2-30%A+6,30f-%A3+5%A2-30%A+6]],
[complexRoots=?2+6?+6,coordinates=[a+1,b+1,c-%A-5,d+%A+1,e+1,f+1]],
[complexRoots=?2-6?+6,coordinates=[a-1,b-1,c-%A+5,d+%A-1,e-1,f-1]],
[complexRoots=?8+6?7+16?6+24?5+18?4-8?2+4,coordinates=[2a+2%A7+9%A6+18%A5+19%A4+4%A3-10%A2-2%A+4,2b+2%A7+9%A6+18%A5+19%A4+4%A3-10%A2-4%A+4,2c-%A7-4%A6-8%A5-9%A4-4%A3-2%A-4,2d+%A7+4%A6+8%A5+9%A4+4%A3+2%A+4,2e-2%A7-9%A6-18%A5-19%A4-4%A3+10%A2+4%A-4,2f-2%A7-9%A6-18%A5-19%A4-4%A3+10%A2+2%A-4]],
[complexRoots=?8+12?7+64?6+192?5+432?4+768?3+1024?2+768?+256,coordinates=[1408a-19%A7-200%A6-912%A5-2216%A4-4544%A3-6784%A2-6976%A-1792,1408b-37%A7-408%A6-1952%A5-5024%A4-10368%A3-16768%A2-17920%A-5120,1408c+37%A7+408%A6+1952%A5+5024%A4+10368%A3+16768%A2+17920%A+5120,1408d+19%A7+200%A6+912%A5+2216%A4+4544%A3+6784%A2+6976%A+1792,2e+%A,2f-%A]],
[complexRoots=?8+4?6+12?4+16?2+4,coordinates=[4a-%A7-3%A5-10%A3-6%A,4b-%A7-3%A5-10%A3-10%A,4c-2%A7-7%A5-20%A3-22%A,4d+2%A7+7%A5+20%A3+22%A,4e+%A7+3%A5+10%A3+10%A,4f+%A7+3%A5+10%A3+6%A]],
[complexRoots=?8+16?6-96?4+256?2+256,coordinates=[512a-%A7-12%A5+176%A3-448%A,128b-%A7-16%A5+96%A3-256%A,128c+%A7+16%A5-96%A3+256%A,512d+%A7+12%A5-176%A3+448%A,2e+%A,2f-%A]],
[complexRoots=?8-12?7+64?6-192?5+432?4-768?3+1024?2-768?+256,coordinates=[1408a-19%A7+200%A6-912%A5+2216%A4-4544%A3+6784%A2-6976%A+1792,1408b-37%A7+408%A6-1952%A5+5024%A4-10368%A3+16768%A2-17920%A+5120,1408c+37%A7-408%A6+1952%A5-5024%A4+10368%A3-16768%A2+17920%A-5120,1408d+19%A7-200%A6+912%A5-2216%A4+4544%A3-6784%A2+6976%A-1792,2e+%A,2f-%A]],
[complexRoots=?8-6?7+16?6-24?5+18?4-8?2+4,coordinates=[2a+2%A7-9%A6+18%A5-19%A4+4%A3+10%A2-2%A-4,2b+2%A7-9%A6+18%A5-19%A4+4%A3+10%A2-4%A-4,2c-%A7+4%A6-8%A5+9%A4-4%A3-2%A+4,2d+%A7-4%A6+8%A5-9%A4+4%A3+2%A-4,2e-2%A7+9%A6-18%A5+19%A4-4%A3-10%A2+4%A+4,2f-2%A7+9%A6-18%A5+19%A4-4%A3-10%A2+2%A+4]],
[complexRoots=?4+12?2+144,coordinates=[12a-%A2-12,12b-%A2-12,12c-%A2-12,12d-%A2-12,6e+%A2+3%A+12,6f+%A2-3%A+12]],
[complexRoots=?4+6?3+30?2+36?+36,coordinates=[6a-%A3-5%A2-24%A-6,30b+%A3+5%A2+30%A+6,30c+%A3+5%A2+30%A+6,30d+%A3+5%A2+30%A+6,30e+%A3+5%A2+30%A+6,30f+%A3+5%A2+6]],
[complexRoots=?4-6?3+30?2-36?+36,coordinates=[6a-%A3+5%A2-24%A+6,30b+%A3-5%A2+30%A-6,30c+%A3-5%A2+30%A-6,30d+%A3-5%A2+30%A-6,30e+%A3-5%A2+30%A-6,30f+%A3-5%A2-6]],
[complexRoots=?4+12?2+144,coordinates=[12a+%A2+12,12b+%A2+12,12c+%A2+12,12d+%A2+12,6e-%A2+3%A-12,6f-%A2-3%A-12]],
[complexRoots=?2-12,coordinates=[a-1,b-1,c-1,d-1,2e+%A+4,2f-%A+4]],
[complexRoots=?2+6?+6,coordinates=[a+%A+5,b-1,c-1,d-1,e-1,f-%A-1]],
[complexRoots=?2-6?+6,coordinates=[a+%A-5,b+1,c+1,d+1,e+1,f-%A+1]],
[complexRoots=?2-12,coordinates=[a+1,b+1,c+1,d+1,2e+%A-4,2f-%A-4]],
[complexRoots=?4+6?3+30?2+36?+36,coordinates=[30a-%A3-5%A2-30%A-6,30b-%A3-5%A2-30%A-6,30c-%A3-5%A2-30%A-6,6d+%A3+5%A2+24%A+6,30e-%A3-5%A2-6,30f-%A3-5%A2-30%A-6]],
[complexRoots=?4-6?3+30?2-36?+36,coordinates=[30a-%A3+5%A2-30%A+6,30b-%A3+5%A2-30%A+6,30c-%A3+5%A2-30%A+6,6d+%A3-5%A2+24%A-6,30e-%A3+5%A2+6,30f-%A3+5%A2-30%A+6]],
[complexRoots=?2+6?+6,coordinates=[a+1,b+1,c+1,d-%A-5,e+%A+1,f+1]],
[complexRoots=?2-6?+6,coordinates=[a-1,b-1,c-1,d-%A+5,e+%A-1,f-1]]]


.. spadType

:sub:`Type: List Record(complexRoots: SparseUnivariatePolynomial`
Integer,coordinates: List Polynomial Integer)



Since the univariateSolveunivariateSolveZeroDimensionalSolvePackage
operation may split a regular set, it returns a list. This explains the
use of concatconcatList.

Look at the last item of the result. It consists of two parts. For any
complex root ? of the univariate polynomial in the first part, we get a
tuple of univariate polynomials (in a, ..., f respectively) by replacing
%A by ? in the second part. Each of these tuples t describes a point of
the variety associated with lp by equaling to zero the polynomials in t.

Note that the way of reading these univariate representations is
explained also in the example illustrating the
ZeroDimensionalSolvePackage constructor.

Now, we compute the points of the variety with real coordinates.


.. spadInput
::

	concat [realSolve(ts)$zdpack for ts in lts]


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------------------------------------+
| [[%B23,%B23,%B23,%B27,-%B27-4%B23,%B23],   |
+--------------------------------------------+



[%B23,%B23,%B23,%B28,-%B28-4%B23,%B23],
[%B24,%B24,%B24,%B25,-%B25-4%B24,%B24],
[%B24,%B24,%B24,%B26,-%B26-4%B24,%B24],
[%B29,%B29,%B29,%B29,%B33,-%B33-4%B29],
[%B29,%B29,%B29,%B29,%B34,-%B34-4%B29],
[%B30,%B30,%B30,%B30,%B31,-%B31-4%B30],
[%B30,%B30,%B30,%B30,%B32,-%B32-4%B30],
[%B35,%B35,%B39,-%B39-4%B35,%B35,%B35],
[%B35,%B35,%B40,-%B40-4%B35,%B35,%B35],
[%B36,%B36,%B37,-%B37-4%B36,%B36,%B36],
[%B36,%B36,%B38,-%B38-4%B36,%B36,%B36],
[%B41,%B52,78655216006689520%B4131-66961792412002229840%B4125-2576989318149235160%B4119-19759129907293003344760%B4113-10484606964892002229840%B417-212526348316006689520%B41,-7781711891387545279120%B4131+19874681962671387545279120%B4125+155496778477189693772639560%B4119+191631411158401693772639560%B4113+3003354886375431387545279120%B417-755656433863198220754160%B41,1094352947462515093040%B4131-2794979430821462515093040%B4125-218708802908737231257546520%B4119-9147666300359177085848840%B4113-145152550961823154171697680%B417-1564893370717462515093040%B41,-%B52-43218230031387545279120%B4131+18094954606922746643920%B4125+863753195062493693772639560%B4119+1088094456732317693772639560%B4113+17326207326857411387545279120%B417+135060885160331387545279120%B41],
[%B42,%B49,78655216006689520%B4231-66961792412002229840%B4225-2576989318149235160%B4219-19759129907293003344760%B4213-10484606964892002229840%B427-212526348316006689520%B42,-7781711891387545279120%B4231+19874681962671387545279120%B4225+155496778477189693772639560%B4219+191631411158401693772639560%B4213+3003354886375431387545279120%B427-755656433863198220754160%B42,1094352947462515093040%B4231-2794979430821462515093040%B4225-218708802908737231257546520%B4219-9147666300359177085848840%B4213-145152550961823154171697680%B427-1564893370717462515093040%B42,-%B49-43218230031387545279120%B4231+18094954606922746643920%B4225+863753195062493693772639560%B4219+1088094456732317693772639560%B4213+17326207326857411387545279120%B427+135060885160331387545279120%B42],
[%B42,%B50,78655216006689520%B4231-66961792412002229840%B4225-2576989318149235160%B4219-19759129907293003344760%B4213-10484606964892002229840%B427-212526348316006689520%B42,-7781711891387545279120%B4231+19874681962671387545279120%B4225+155496778477189693772639560%B4219+191631411158401693772639560%B4213+3003354886375431387545279120%B427-755656433863198220754160%B42,1094352947462515093040%B4231-2794979430821462515093040%B4225-218708802908737231257546520%B4219-9147666300359177085848840%B4213-145152550961823154171697680%B427-1564893370717462515093040%B42,-%B50-43218230031387545279120%B4231+18094954606922746643920%B4225+863753195062493693772639560%B4219+1088094456732317693772639560%B4213+17326207326857411387545279120%B427+135060885160331387545279120%B42],
[%B43,%B47,78655216006689520%B4331-66961792412002229840%B4325-2576989318149235160%B4319-19759129907293003344760%B4313-10484606964892002229840%B437-212526348316006689520%B43,-7781711891387545279120%B4331+19874681962671387545279120%B4325+155496778477189693772639560%B4319+191631411158401693772639560%B4313+3003354886375431387545279120%B437-755656433863198220754160%B43,1094352947462515093040%B4331-2794979430821462515093040%B4325-218708802908737231257546520%B4319-9147666300359177085848840%B4313-145152550961823154171697680%B437-1564893370717462515093040%B43,-%B47-43218230031387545279120%B4331+18094954606922746643920%B4325+863753195062493693772639560%B4319+1088094456732317693772639560%B4313+17326207326857411387545279120%B437+135060885160331387545279120%B43],
[%B43,%B48,78655216006689520%B4331-66961792412002229840%B4325-2576989318149235160%B4319-19759129907293003344760%B4313-10484606964892002229840%B437-212526348316006689520%B43,-7781711891387545279120%B4331+19874681962671387545279120%B4325+155496778477189693772639560%B4319+191631411158401693772639560%B4313+3003354886375431387545279120%B437-755656433863198220754160%B43,1094352947462515093040%B4331-2794979430821462515093040%B4325-218708802908737231257546520%B4319-9147666300359177085848840%B4313-145152550961823154171697680%B437-1564893370717462515093040%B43,-%B48-43218230031387545279120%B4331+18094954606922746643920%B4325+863753195062493693772639560%B4319+1088094456732317693772639560%B4313+17326207326857411387545279120%B437+135060885160331387545279120%B43],
[%B44,%B45,78655216006689520%B4431-66961792412002229840%B4425-2576989318149235160%B4419-19759129907293003344760%B4413-10484606964892002229840%B447-212526348316006689520%B44,-7781711891387545279120%B4431+19874681962671387545279120%B4425+155496778477189693772639560%B4419+191631411158401693772639560%B4413+3003354886375431387545279120%B447-755656433863198220754160%B44,1094352947462515093040%B4431-2794979430821462515093040%B4425-218708802908737231257546520%B4419-9147666300359177085848840%B4413-145152550961823154171697680%B447-1564893370717462515093040%B44,-%B45-43218230031387545279120%B4431+18094954606922746643920%B4425+863753195062493693772639560%B4419+1088094456732317693772639560%B4413+17326207326857411387545279120%B447+135060885160331387545279120%B44],
[%B44,%B46,78655216006689520%B4431-66961792412002229840%B4425-2576989318149235160%B4419-19759129907293003344760%B4413-10484606964892002229840%B447-212526348316006689520%B44,-7781711891387545279120%B4431+19874681962671387545279120%B4425+155496778477189693772639560%B4419+191631411158401693772639560%B4413+3003354886375431387545279120%B447-755656433863198220754160%B44,1094352947462515093040%B4431-2794979430821462515093040%B4425-218708802908737231257546520%B4419-9147666300359177085848840%B4413-145152550961823154171697680%B447-1564893370717462515093040%B44,-%B46-43218230031387545279120%B4431+18094954606922746643920%B4425+863753195062493693772639560%B4419+1088094456732317693772639560%B4413+17326207326857411387545279120%B447+135060885160331387545279120%B44],
[%B53,%B57,-%B57-4%B53,%B53,%B53,%B53],
[%B53,%B58,-%B58-4%B53,%B53,%B53,%B53],
[%B54,%B55,-%B55-4%B54,%B54,%B54,%B54],
[%B54,%B56,-%B56-4%B54,%B54,%B54,%B54]]


.. spadType

:sub:`Type: List List RealClosure Fraction Integer`



We obtain 24 points given by lists of elements in the RealClosure of
Fraction of R. In each list, the first value corresponds to the
indeterminate f, the second to e and so on. See
ZeroDimensionalSolvePackage to learn more about the
realSolverealSolveZeroDimensionalSolvePackage operation.



