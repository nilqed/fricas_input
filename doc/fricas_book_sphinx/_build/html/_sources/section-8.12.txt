.. status: ok


8.12 Primary Decomposition of Ideals
------------------------------------

FriCAS provides a facility for the primary decomposition ideal:primary
decomposition of primary decomposition of ideal polynomial ideals over
fields of characteristic zero. The algorithm is discussed in
\\cite{gtz:gbpdpi} and works in essentially two steps:

#. the problem is solved for 0-dimensional ideals by generic projection
   on the last coordinate
#. a reduction process uses localization and ideal quotients to reduce
   the general case to the 0-dimensional one.

The FriCAS constructor PolynomialIdeals represents ideals with
coefficients in any field and supports the basic ideal operations,
including intersection, sum and quotient. IdealDecompositionPackage
contains the specific operations for the primary decomposition and the
computation of the radical of an ideal with polynomial coefficients in a
field of characteristic 0 with an effective algorithm for factoring
polynomials.

The following examples illustrate the capabilities of this facility.

First consider the ideal generated by x2+y2-1 (which defines a circle in
the (x,y)-plane) and the ideal generated by x2-y2 (corresponding to the
straight lines x=y and x=-y.


.. spadInput
::

	(n,m) : List DMP([x,y],FRAC INT)


.. spadMathAnswer
.. spadType

:sub:`Type: Void`




.. spadInput
::

	m := [x^2+y^2-1]


.. spadMathAnswer
.. spadMathOutput
.. math::

+-------------+
| [x2+y2-1]   |
+-------------+




.. spadType

:sub:`Type: List DistributedMultivariatePolynomial([x,y],Fraction Integer)`




.. spadInput
::

	n := [x^2-y^2]


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------+
| [x2-y2]   |
+-----------+




.. spadType

:sub:`Type: List DistributedMultivariatePolynomial([x,y],Fraction Integer)`



We find the equations defining the intersection of the two loci. This
correspond to the sum of the associated ideals.


.. spadInput
::

	id := ideal m + ideal n


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------+
| [x2-12,y2-12]   |
+-----------------+




.. spadType

:sub:`Type: PolynomialIdeals(Fraction Integer,`
DirectProduct(2,NonNegativeInteger),OrderedVariableList [x,y],
DistributedMultivariatePolynomial([x,y],Fraction Integer))



We can check if the locus contains only a finite number of points, that
is, if the ideal is zero-dimensional.


.. spadInput
::

	zeroDim? id


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------+
| true   |
+--------+




.. spadType

:sub:`Type: Boolean`




.. spadInput
::

	zeroDim?(ideal m)


.. spadMathAnswer
.. spadMathOutput
.. math::

+---------+
| false   |
+---------+




.. spadType

:sub:`Type: Boolean`




.. spadInput
::

	dimension ideal m


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----+
| 1   |
+-----+




.. spadType

:sub:`Type: PositiveInteger`



We can find polynomial relations among the generators ( f and g are the
parametric equations of the knot).


.. spadInput
::

	(f,g):DMP([x,y],FRAC INT)


.. spadMathAnswer
.. spadType

:sub:`Type: Void`




.. spadInput
::

	f := x^2-1


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------+
| x2-1   |
+--------+




.. spadType

:sub:`Type: DistributedMultivariatePolynomial([x,y],Fraction Integer)`




.. spadInput
::

	g := x*(x^2-1)


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------+
| x3-x   |
+--------+




.. spadType

:sub:`Type: DistributedMultivariatePolynomial([x,y],Fraction Integer)`




.. spadInput
::

	relationsIdeal [f,g]


.. spadMathAnswer
.. spadMathOutput
.. math::

+-------------------------------------+
| [-%B2+%A3+%A2]|[%A=x2-1,%B=x3-x]   |
+-------------------------------------+




.. spadType

:sub:`Type: SuchThat(List Polynomial Fraction Integer, List Equation`
Polynomial Fraction Integer)



We can compute the primary decomposition of an ideal.


.. spadInput
::

	l: List DMP([x,y,z],FRAC INT)


.. spadMathAnswer
.. spadType

:sub:`Type: Void`




.. spadInput
::

	l:=[x^2+2*y^2,x*z^2-y*z,z^2-4]


.. spadMathAnswer
.. spadMathOutput
.. math::

+------------------------+
| [x2+2y2,xz2-yz,z2-4]   |
+------------------------+




.. spadType

:sub:`Type: List DistributedMultivariatePolynomial([x,y,z],Fraction Integer)`




.. spadInput
::

	ld:=primaryDecomp ideal l


.. spadMathAnswer
.. spadMathOutput
.. math::

+-----------------------------------+
| [[x+12y,y2,z+2],[x-12y,y2,z-2]]   |
+-----------------------------------+




.. spadType

:sub:`Type: List PolynomialIdeals(Fraction Integer,`
DirectProduct(3,NonNegativeInteger), OrderedVariableList [x,y,z],
DistributedMultivariatePolynomial([x,y,z],Fraction Integer))



We can intersect back.


.. spadInput
::

	reduce(intersect,ld)


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------------+
| [x-14yz,y2,z2-4]   |
+--------------------+




.. spadType

:sub:`Type: PolynomialIdeals(Fraction Integer,`
DirectProduct(3,NonNegativeInteger), OrderedVariableList [x,y,z],
DistributedMultivariatePolynomial([x,y,z],Fraction Integer))



We can compute the radical of every primary component.


.. spadInput
::

	reduce(intersect,[radical ld.i for i in 1..2])


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------+
| [x,y,z2-4]   |
+--------------+




.. spadType

:sub:`Type: PolynomialIdeals(Fraction Integer,`
DirectProduct(3,NonNegativeInteger), OrderedVariableList [x,y,z],
DistributedMultivariatePolynomial([x,y,z],Fraction Integer))



Their intersection is equal to the radical of the ideal of l.


.. spadInput
::

	radical ideal l


.. spadMathAnswer
.. spadMathOutput
.. math::

+--------------+
| [x,y,z2-4]   |
+--------------+




.. spadType

:sub:`Type: PolynomialIdeals(Fraction Integer,`
DirectProduct(3,NonNegativeInteger), OrderedVariableList [x,y,z],
DistributedMultivariatePolynomial([x,y,z],Fraction Integer))





