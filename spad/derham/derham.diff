*** /home/kfp/Development/fricas/src/algebra/derham.spad	2016-02-20 18:52:50.634651590 +0100
--- derham.spad	2016-03-30 00:11:19.344038714 +0200
***************
*** 3,10 ****
  ++ Date  : 03/01/89; revised 03/17/89; revised 12/02/90.
  ++ Description: The category of all left algebras over an arbitrary
  ++ ring.
  LeftAlgebra(R : Ring) : Category == Join(Ring, LeftModule R) with
!     --operations
        coerce : R -> %
          ++ coerce(r) returns r * 1 where 1 is the identity of the
          ++ left algebra.
--- 3,11 ----
  ++ Date  : 03/01/89; revised 03/17/89; revised 12/02/90.
  ++ Description: The category of all left algebras over an arbitrary
  ++ ring.
+ ++
  LeftAlgebra(R : Ring) : Category == Join(Ring, LeftModule R) with
! 
        coerce : R -> %
          ++ coerce(r) returns r * 1 where 1 is the identity of the
          ++ left algebra.
***************
*** 8,18 ****
        coerce : R -> %
          ++ coerce(r) returns r * 1 where 1 is the identity of the
          ++ left algebra.
      add
        coerce(x : R) : % == x * 1$%
  
  )abbrev domain EAB ExtAlgBasis
- --% ExtAlgBasis
  ++  Author: Larry Lambe
  ++  Date created: 03/14/89
  ++  Description:
--- 9,21 ----
        coerce : R -> %
          ++ coerce(r) returns r * 1 where 1 is the identity of the
          ++ left algebra.
+         
      add
+     
        coerce(x : R) : % == x * 1$%
  
+ 
  )abbrev domain EAB ExtAlgBasis
  ++  Author: Larry Lambe
  ++  Date created: 03/14/89
  ++  Description:
***************
*** 30,64 ****
  ++  ordered basis element is provided to allow the convenient input of
  ++  expressions. Another exported function forgets the ordered structure
  ++  and simply returns the list corresponding to an ordered subset.
  
- ExtAlgBasis() : Export == Implement where
     I   ==> Integer
     L   ==> List
     NNI ==> NonNegativeInteger
  
!    Export == OrderedSet with
!      coerce     : L I -> %
          ++ coerce(l) converts a list of 0's and 1's into a basis
          ++ element, where 1 (respectively 0) designates that the
          ++ variable of the corresponding index of l is (respectively, is not)
          ++ present.
          ++ Error: if an element of l is not 0 or 1.
!      degree     : %   -> NNI
          ++ degree(x) gives the numbers of 1's in x, i.e., the number
          ++ of non-zero exponents in the basis element that x represents.
!      exponents  : %   -> L I
          ++ exponents(x) converts a domain element into a list of zeros
          ++ and ones corresponding to the exponents in the basis element
          ++ that x represents.
! --   subscripts : %   -> L I
!         -- subscripts(x) looks at the exponents in x and converts
!         -- them to the proper subscripts
!      Nul        : NNI -> %
          ++ Nul() gives the basis element 1 for the algebra generated
          ++ by n generators.
  
!    Implement == add
       Rep := L I
       x, y :  %
  
       x = y == x =$Rep y
--- 33,76 ----
  ++  ordered basis element is provided to allow the convenient input of
  ++  expressions. Another exported function forgets the ordered structure
  ++  and simply returns the list corresponding to an ordered subset.
+ ++
+ ExtAlgBasis() : Exports == Implementation where
  
     I   ==> Integer
     L   ==> List
     NNI ==> NonNegativeInteger
  
!    Exports == OrderedSet with
!    
!      coerce : List(I) -> %
          ++ coerce(l) converts a list of 0's and 1's into a basis
          ++ element, where 1 (respectively 0) designates that the
          ++ variable of the corresponding index of l is (respectively, is not)
          ++ present.
          ++ Error: if an element of l is not 0 or 1.
! 
! 
!      convert : % -> List(I)
!         ++ convert to a list of integers
! 
!      degree : %   -> NNI
          ++ degree(x) gives the numbers of 1's in x, i.e., the number
          ++ of non-zero exponents in the basis element that x represents.
!         
!      exponents : %   -> L I
          ++ exponents(x) converts a domain element into a list of zeros
          ++ and ones corresponding to the exponents in the basis element
          ++ that x represents.
!         
!      Nul : NNI -> %
          ++ Nul() gives the basis element 1 for the algebra generated
          ++ by n generators.
  
! 
!    Implementation == add
!    
       Rep := L I
+ 
       x, y :  %
  
       x = y == x =$Rep y
***************
*** 71,108 ****
  
       coerce(li : (L I)) ==
         for x in li repeat
!          if x ~= 1 and x ~= 0 then error "coerce: values can only be 0 and 1"
         li
  
!      degree x         == (_+/x)::NNI
  
!      exponents x      == copy(x @ Rep)
  
! --   subscripts x     ==
! --      cntr: I := 1
! --      result: L I := []
! --      for j in x repeat
! --        if j = 1 then result := cons(cntr, result)
! --        cntr := cntr+1
! --      reverse! result
  
!      Nul n            == [0 for i in 1..n]
  
-      coerce x         == coerce(x @ Rep)$(L I)
  
  )abbrev domain ANTISYM AntiSymm
! ++   Author: Larry A. Lambe
! ++   Date     : 01/26/91.
! ++   Revised  : 30 Nov 94
! ++
! ++   based on AntiSymmetric '89
  ++
! ++   Needs: ExtAlgBasis, FreeModule(Ring, OrderedSet), LALG, LALG-
  ++
! ++   Description: The domain of antisymmetric polynomials.
! 
  
- AntiSymm(R : Ring, lVar : List Symbol) : Export == Implement where
    LALG ==> LeftAlgebra
    FMR  ==> FM(R, EAB)
    FM   ==> FreeModule
--- 83,113 ----
  
       coerce(li : (L I)) ==
         for x in li repeat
!          if x ~= 1 and x ~= 0 then 
!            error "coerce: values can only be 0 and 1"
         li
  
!      degree x == (_+/x)::NNI
  
!      exponents x == copy(x @ Rep)
  
!      Nul n == [0 for i in 1..n]
  
!      coerce x == coerce(x @ Rep)$(L I)
!      convert(x:%):List(I) == x@Rep
       
       
  )abbrev domain ANTISYM AntiSymm
! ++ Author: Larry A. Lambe
! ++ Date     : 01/26/91.
! ++ Revised  : 30 Nov 94
  ++
! ++ based on AntiSymmetric '89
! ++ Needs: ExtAlgBasis, FreeModule(Ring, OrderedSet), LALG, LALG-
! ++ Description: The domain of antisymmetric polynomials.
  ++
! AntiSymm(R : Ring, lVar : List Symbol) : Exports == Implementation where
  
    LALG ==> LeftAlgebra
    FMR  ==> FM(R, EAB)
    FM   ==> FreeModule
***************
*** 115,170 ****
    coef ==> c
    Term ==> Record(k : EAB, c : R)
  
!   Export == Join(LALG(R), RetractableTo(R)) with
!       leadingCoefficient : %           -> R
          ++ leadingCoefficient(p) returns the leading
          ++ coefficient of antisymmetric polynomial p.
! --    leadingSupport       : %           -> EAB
!       leadingBasisTerm     : %           -> %
          ++ leadingBasisTerm(p) returns the leading
          ++ basis term of antisymmetric polynomial p.
!       reductum           : %           -> %
          ++ reductum(p), where p is an antisymmetric polynomial,
          ++ returns p minus the leading
          ++ term of p if p has at least two terms, and 0 otherwise.
!       coefficient        : (%, %)     -> R
          ++ coefficient(p, u) returns the coefficient of
          ++ the term in p containing the basis term u if such
          ++ a term exists, and 0 otherwise.
          ++ Error: if the second argument u is not a basis element.
!       generator          : NNI         -> %
          ++ generator(n) returns the nth multiplicative generator,
          ++ a basis term.
!       exp                : L I         -> %
          ++  exp([i1, ...in]) returns \spad{u_1\^{i_1} ... u_n\^{i_n}}
!       homogeneous?       : %           -> Boolean
          ++  homogeneous?(p) tests if all of the terms of
          ++  p have the same degree.
!       retractable?       : %           -> Boolean
          ++  retractable?(p) tests if p is a 0-form,
          ++  i.e., if degree(p) = 0.
!       degree             : %           -> NNI
          ++  degree(p) returns the homogeneous degree of p.
!       map                : (R -> R, %) -> %
          ++  map(f, p) changes each coefficient of p by the
          ++  application of f.
  
  
! --    1 corresponds to the empty monomial Nul = [0, ..., 0]
! --    from EAB.  In terms of the exterior algebra on X,
! --    it corresponds to the identity element which lives
! --    in homogeneous degree 0.
  
-   Implement == FMR add
        Rep := L Term
!       x, y :  EAB
!       a, b :  %
        r   :  R
        m   :  I
  
        dim := #lVar
  
        1 == [[ Nul(dim)$EAB, 1$R ]]
  
        coefficient(a, u) ==
          not null u.rest => error "2nd argument must be a basis element"
--- 120,191 ----
    coef ==> c
    Term ==> Record(k : EAB, c : R)
  
!   Exports == Join(LALG(R), RetractableTo(R)) with
!   
!       leadingCoefficient : % -> R
          ++ leadingCoefficient(p) returns the leading
          ++ coefficient of antisymmetric polynomial p.
! 
!       leadingBasisTerm : % -> %
          ++ leadingBasisTerm(p) returns the leading
          ++ basis term of antisymmetric polynomial p.
!         
!       reductum : % -> %
          ++ reductum(p), where p is an antisymmetric polynomial,
          ++ returns p minus the leading
          ++ term of p if p has at least two terms, and 0 otherwise.
!         
!       coefficient : (%, %) -> R
          ++ coefficient(p, u) returns the coefficient of
          ++ the term in p containing the basis term u if such
          ++ a term exists, and 0 otherwise.
          ++ Error: if the second argument u is not a basis element.
!         
!       generator : NNI -> %
          ++ generator(n) returns the nth multiplicative generator,
          ++ a basis term.
!         
!       exp : L I -> %
          ++  exp([i1, ...in]) returns \spad{u_1\^{i_1} ... u_n\^{i_n}}
!         
!       homogeneous? : % -> Boolean
          ++  homogeneous?(p) tests if all of the terms of
          ++  p have the same degree.
!         
!       retractable? : % -> Boolean
          ++  retractable?(p) tests if p is a 0-form,
          ++  i.e., if degree(p) = 0.
!         
!       degree : % -> NNI
          ++  degree(p) returns the homogeneous degree of p.
!         
!       map : (R -> R, %) -> %
          ++  map(f, p) changes each coefficient of p by the
          ++  application of f.
  
+       convert : % -> List(Term)
+         ++  convert(p) converts p to a list of terms
  
!       convert : List(Term) -> %
!         ++  convert a list of terms back to p
! 
! 
!   Implementation == FMR add
    
        Rep := L Term
! 
!       x, y : EAB
!       a, b : %
        r   :  R
        m   :  I
  
        dim := #lVar
  
        1 == [[ Nul(dim)$EAB, 1$R ]]
+       -- 1 corresponds to the empty monomial Nul = [0, ..., 0]
+       -- from EAB. In terms of the exterior algebra on X,
+       -- it corresponds to the identity element which lives
+       -- in homogeneous degree 0.
  
        coefficient(a, u) ==
          not null u.rest => error "2nd argument must be a basis element"
***************
*** 178,184 ****
          null a or (a.first.k  =  Nul(dim))
  
        retractIfCan(a):Union(R,"failed") ==
!         null a               => 0$R
          a.first.k = Nul(dim) => leadingCoefficient a
          "failed"
  
--- 199,205 ----
          null a or (a.first.k  =  Nul(dim))
  
        retractIfCan(a):Union(R,"failed") ==
!         null a => 0$R
          a.first.k = Nul(dim) => leadingCoefficient a
          "failed"
  
***************
*** 250,257 ****
        characteristic() == characteristic()$R
  
        generator(j) ==
-         -- j < 1 or j > dim => error "your subscript is out of range"
-         -- error will be generated by dum.j if out of range
          dum : L I := [0 for i in 1..dim]
          dum.j := 1
          [[dum::EAB, 1::R]]
--- 271,276 ----
***************
*** 264,282 ****
        displayList : EAB -> O
        displayList(x) : O ==
          le : L I := exponents(x)$EAB
- --      reduce(_*, [(lVar.i)::O for i in 1..dim | le.i = 1])$L(O)
- --        reduce(_*, [(lVar.i)::O for i in 1..dim | one?(le.i)])$L(O)
          reduce(_*, [(lVar.i)::O for i in 1..dim | ((le.i) = 1)])$L(O)
  
        makeTerm : (R, EAB) -> O
        makeTerm(r, x) ==
        -- we know that r ~= 0
          x = Nul(dim)$EAB  => r::O
- --        one? r => displayList(x)
          (r = 1) => displayList(x)
- --      r = 1 => displayList(x)
- --      r = 0 => 0$I::O
- --      x = Nul(dim)$EAB  => r::O
          r::O * displayList(x)
  
        coerce(a) : O ==
--- 283,295 ----
***************
*** 286,291 ****
--- 299,309 ----
                   makeTerm(t.coef, t.base)
          reduce(_+, [makeTerm(t.coef, t.base) for t in (a @ Rep)])$L(O)
  
+       convert(a:%):List(Term) == a@Rep
+       convert(t:List Term):% == t
+ 
+ 
+ 
  )abbrev domain DERHAM DeRhamComplex
  ++ Author: Larry A. Lambe
  ++ Date    : 01/26/91.
***************
*** 299,307 ****
  ++ class of differential forms of arbitary degree over a coefficient ring.
  ++ See Flanders, Harley, Differential Forms, With Applications to the Physical
  ++ Sciences, New York, Academic Press, 1963.
  
- DeRhamComplex(CoefRing, listIndVar : List Symbol) : Export == Implement where
-   CoefRing :  Join(Ring, Comparable)
    ASY     ==> AntiSymm(R, listIndVar)
    DIFRING ==> DifferentialRing
    LALG    ==> LeftAlgebra
--- 317,328 ----
  ++ class of differential forms of arbitary degree over a coefficient ring.
  ++ See Flanders, Harley, Differential Forms, With Applications to the Physical
  ++ Sciences, New York, Academic Press, 1963.
+ ++
+ DeRhamComplex(CoefRing, listIndVar) : Exports == Implementation where
+   
+   CoefRing : Join(Ring, Comparable)
+   listIndVar : List Symbol
    
    ASY     ==> AntiSymm(R, listIndVar)
    DIFRING ==> DifferentialRing
    LALG    ==> LeftAlgebra
***************
*** 312,350 ****
    NNI     ==> NonNegativeInteger
    O       ==> OutputForm
    R       ==> Expression(CoefRing)
  
!   Export == Join(LALG(R), RetractableTo(R)) with
!       leadingCoefficient : %           -> R
          ++ leadingCoefficient(df) returns the leading
          ++ coefficient of differential form df.
!       leadingBasisTerm   : %           -> %
          ++ leadingBasisTerm(df) returns the leading
          ++ basis term of differential form df.
!       reductum           : %           -> %
          ++ reductum(df), where df is a differential form,
          ++ returns df minus the leading
          ++ term of df if df has two or more terms, and
          ++ 0 otherwise.
!       coefficient        : (%, %)     -> R
          ++ coefficient(df, u), where df is a differential form,
          ++ returns the coefficient of df containing the basis term u
          ++ if such a term exists, and 0 otherwise.
!       generator          : NNI         -> %
          ++ generator(n) returns the nth basis term for a differential form.
!       homogeneous?       : %           -> Boolean
          ++  homogeneous?(df) tests if all of the terms of
          ++  differential form df have the same degree.
!       retractable?       : %           -> Boolean
          ++  retractable?(df) tests if differential form df is a 0-form,
          ++  i.e., if degree(df) = 0.
!       degree             : %           -> NNI
          ++  degree(df) returns the homogeneous degree of differential form df.
!       map                : (R -> R, %) -> %
          ++  map(f, df) replaces each coefficient x of differential
          ++  form df by \spad{f(x)}.
!       totalDifferential    : R -> %
          ++  totalDifferential(x) returns the total differential
          ++  (gradient) form for element x.
        exteriorDifferential : % -> %
          ++  exteriorDifferential(df) returns the exterior
          ++  derivative (gradient, curl, divergence, ...) of
--- 333,385 ----
    NNI     ==> NonNegativeInteger
    O       ==> OutputForm
    R       ==> Expression(CoefRing)
+   IF      ==> InputForm
+   Term    ==> Record(k : EAB, c : R)
  
! 
!   Exports == Join(LALG(R), RetractableTo(R)) with
!   
!       leadingCoefficient : % -> R
          ++ leadingCoefficient(df) returns the leading
          ++ coefficient of differential form df.
!         
!       leadingBasisTerm : % -> %
          ++ leadingBasisTerm(df) returns the leading
          ++ basis term of differential form df.
!         
!       reductum : % -> %
          ++ reductum(df), where df is a differential form,
          ++ returns df minus the leading
          ++ term of df if df has two or more terms, and
          ++ 0 otherwise.
!         
!       coefficient : (%, %) -> R
          ++ coefficient(df, u), where df is a differential form,
          ++ returns the coefficient of df containing the basis term u
          ++ if such a term exists, and 0 otherwise.
!         
!       generator : NNI -> %
          ++ generator(n) returns the nth basis term for a differential form.
!         
!       homogeneous? : % -> Boolean
          ++  homogeneous?(df) tests if all of the terms of
          ++  differential form df have the same degree.
!         
!       retractable? : % -> Boolean
          ++  retractable?(df) tests if differential form df is a 0-form,
          ++  i.e., if degree(df) = 0.
!         
!       degree : % -> NNI
          ++  degree(df) returns the homogeneous degree of differential form df.
!         
!       map : (R -> R, %) -> %
          ++  map(f, df) replaces each coefficient x of differential
          ++  form df by \spad{f(x)}.
!         
!       totalDifferential : R -> %
          ++  totalDifferential(x) returns the total differential
          ++  (gradient) form for element x.
+         
        exteriorDifferential : % -> %
          ++  exteriorDifferential(df) returns the exterior
          ++  derivative (gradient, curl, divergence, ...) of
***************
*** 350,363 ****
          ++  derivative (gradient, curl, divergence, ...) of
          ++  the differential form df.
  
!   Implement == ASY add
        Rep := ASY
  
        dim := #listIndVar
  
        totalDifferential(f) ==
!         divs := [differentiate(f, listIndVar.i)*generator(i)$ASY for i in 1..dim]
!         reduce("+",divs)
  
        termDiff : (R, %) -> %
        termDiff(r, e) ==
--- 385,417 ----
          ++  derivative (gradient, curl, divergence, ...) of
          ++  the differential form df.
  
!       dim : % -> NNI
!         ++  dim(f) returns the dimension of the base space (#listIndVar)
!         
!       getCoeffRing : % -> Type
!         ++  getCoeffRing(f) returns the coeffcient ring.
!         
!       getIndVars : % -> List Symbol
!         ++  getIndVars(f) returns the list of index variables.
! 
!       coerce : % -> List Term
!         ++  coerce to a list of low level terms = Record(ExtAlgBasis,R) 
! 
!       convert : List Term -> %
!         ++  convert a list of terms back: convert(coerce %)=%
! 
!         
!   Implementation == ASY add
!   
        Rep := ASY
  
        dim := #listIndVar
        
+       dim(f) == #listIndVar 
+ 
        totalDifferential(f) ==
!         dv := [differentiate(f, listIndVar.i)*generator(i)$ASY for i in 1..dim]
!         reduce("+",dv)
  
        termDiff : (R, %) -> %
        termDiff(r, e) ==
***************
*** 365,399 ****
  
        exteriorDifferential(x) ==
          x = 0 => 0
!         termDiff(leadingCoefficient(x)$Rep, leadingBasisTerm x) + exteriorDifferential(reductum x)
  
!       lv := [concat("d",string(liv))$String::Symbol for liv in listIndVar]
  
        displayList : EAB -> O
        displayList(x) : O ==
          le : L I := exponents(x)$EAB
- --      reduce(_*, [(lv.i)::O for i in 1..dim | le.i = 1])$L(O)
- --        reduce(_*, [(lv.i)::O for i in 1..dim | one?(le.i)])$L(O)
          reduce(_*, [(lv.i)::O for i in 1..dim | ((le.i) = 1)])$L(O)
  
        makeTerm : (R, EAB) -> O
        makeTerm(r, x) ==
        -- we know that r ~= 0
          x = Nul(dim)$EAB  => r::O
- --        one? r => displayList(x)
          (r = 1) => displayList(x)
- --      r = 1 => displayList(x)
          r::O * displayList(x)
  
!       terms : % -> List Record(k : EAB, c : R)
!       terms(a) ==
!         -- it is the case that there are at least two terms in a
!         a pretend List Record(k : EAB, c : R)
  
        coerce(a) : O ==
!         a           = 0$Rep => 0$I::O
          ta := terms a
- --      reductum(a) = 0$Rep => makeTerm(leadingCoefficient a, a.first.k)
          null ta.rest => makeTerm(ta.first.c, ta.first.k)
          reduce(_+, [makeTerm(t.c, t.k) for t in ta])$L(O)
  
--- 419,459 ----
  
        exteriorDifferential(x) ==
          x = 0 => 0
!         termDiff(leadingCoefficient(x)$Rep, leadingBasisTerm x) + _
!         exteriorDifferential(reductum x)
  
! 
!       d(s:Symbol):Symbol ==
!         ds:=concat["d",string name(s)]::Symbol
!         script(ds,scripts(s))
!         
!       lv := [d(liv) for liv in listIndVar]
  
        displayList : EAB -> O
        displayList(x) : O ==
          le : L I := exponents(x)$EAB
          reduce(_*, [(lv.i)::O for i in 1..dim | ((le.i) = 1)])$L(O)
  
        makeTerm : (R, EAB) -> O
        makeTerm(r, x) ==
        -- we know that r ~= 0
          x = Nul(dim)$EAB  => r::O
          (r = 1) => displayList(x)
          r::O * displayList(x)
  
!       terms : % -> List Term
!       terms(a) == convert(a)@List Term
!       
!       getCoeffRing(a) == CoefRing
!       getIndVars(a) == listIndVar
! 
!       coerce(a:%):List(Term) == convert(a)@List Term  
!       
!       convert(t:List Term):% == convert(t)$ASY
  
        coerce(a) : O ==
!         a = 0$Rep => 0$I::O
          ta := terms a
          null ta.rest => makeTerm(ta.first.c, ta.first.k)
          reduce(_+, [makeTerm(t.c, t.k) for t in ta])$L(O)
  
