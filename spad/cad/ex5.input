)clear all

Q ==> Fraction Integer
F ==> RealClosure Q
P ==> Polynomial F
CADP ==> CylindricalAlgebraicDecompositionPackage(F)
CELL ==> Cell F

macro cad == cylindricalDecomposition
macro size == #

p1:=( a*x^2 + b*x +c )$P


L:=[p1]                 -- list of polynomials
V:=[x,c,b,a]            -- list of variables (ordered)
lc:=cad(L,V)$CADP       -- CAD

-- list sample points of CAD l
samplePoints(l) == [samplePoint(l.j) for j in 1..#l]

-- list dimensions of cells in CAD l
dimensions(l) == [dimension(l.j) for j in 1..#l]

-- calculate relative approximations (sample points)
approxPoints(sps) ==
  precision(30)
  lf:=[[relativeApprox(c,2^(-precision()))::Float for c in p] for p in sps]
  lp:=[ point(term::List(DoubleFloat))$Point(DoubleFloat) for term in lf]
  

-- evaluate polynomial p at sample points l=[p1 ... ]
values(l,p) == [eval(p,variables(p),samplePoint(cell))::F for cell in l]

-- list of the sign of the polynomial p in each cell
signs(l,p) == [sign(eval(p,variables(p),samplePoint(cell))::F) for cell in l]

-- list the indices of the cells where p=0
zeroCells(l,p) == 
  sgn:=signs(l,p)
  [j for j in 1..#l | sgn.j=0]


-- list the projection sets until []
projSets(lpol,vars) ==
  lp1:=projectionSet([univariate(pol, first vars) for pol in lpol])$CADP
  vr:=rest vars
  vr=[] or lp1=[] => [lp1]
  concat(lp1,projSets(lp1,vr))


-- create induced CAD, i.e. project cells to one less dimension
induceCAD(l) == [projection cell for cell in l]

projSP(sp) == [rest x for x in sp]

-- A:=projSP(samplePoints lc)
-- B:=samplePoints(induceCAD lc)
-- test(A=B) --> true

-- 
