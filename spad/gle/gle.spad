)abbrev package GLE GraphicsLayoutEngine
++ Author: Kurt Pagani
++ Date Created: Mon Aug 06 18:17:40 CEST 2018
++ License: BSD
++ References:
++ Description:
++
GraphicsLayoutEngine : Exports == Implementation where

  MSC ==> MoreSystemCommands
  STR ==> String
  PI  ==> PositiveInteger
  F   ==> Float
  
  GRAPH ==> Record(glefile:STR, xsize:STR, ysize:STR, xtitle:STR,_
                   ytitle:STR,data:STR)
  
  
  Exports == with

    --coerce : % -> OutputForm
    format : (STR,STR) -> STR
    format : (STR,List STR) -> STR
    
    graph  : PI -> GRAPH 
    create : GRAPH -> FileName
    display : FileName -> Void
	
	
  Implementation ==  add 

    format(s:STR,t:STR):STR == string FORMAT('NIL,s,t)$Lisp
      -- format("<title>~a</title>","'Hello'")
      
    format(s:STR,l:List STR) == string FORMAT('NIL,s,l)$Lisp
      -- FORMAT('NIL,"~{~a ~a ~a ~}",["x","y","z"])$Lisp
      -- format("~{~a ~a ~a ~}",["One", "two", "three"])


    graph(n:PositiveInteger):GRAPH ==
      construct("*.gle","12","8","x","y","*.dat")$GRAPH
      

    graph1:="~{size ~a ~a_
      ~%begin graph_
      ~%  xtitle _"~a_"_
      ~%  ytitle _"~a_"_
      ~%  data _"~a_"_
      ~%  d1 line color red marker circle_
      ~%end graph~}"

    create(g:GRAPH):FileName ==
      fn:FileName:=g.glefile::FileName
      tf:TextFile:=open(fn,"output")
      put(s) ==> writeLine!(tf,s)
      s:=format(graph1,[g.xsize,g.ysize,g.xtitle,g.ytitle,g.data])
      put(s)
      close!(tf)
      return fn
    
    display(f:FileName):Void ==
      cmd:=format("system qgle -f ~a",f::STR)
      systemCommand(cmd)$MSC


-- g:=graph(1)
-- g.data:="C:/Users/kfp/test.dat"
-- g.glefile:="C:/Users/kfp/glefile.gle"
-- display(create g)