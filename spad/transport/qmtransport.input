RR ==> Expression Integer
CC ==> Expression Complex Integer

PI ==> PositiveInteger
CF ==> Complex Float
IF ==> Interval Float
CIF ==> Complex Interval Float
VIF ==> Vector Interval Float
VCIF ==> Vector Complex Interval Float

NP ==> PositiveInteger
GRID ==> Record(N:PI, L:IF, dx:IF, dk:IF, x:VIF, k:VIF)

--N(M:NP):NP == 2*M+1
--L(M:NP):Float == sqrt(2*%pi*N(M))
--dx(M:NP):Float == L(M)/N(M)
--dk(M:NP):Float == 2*%pi/L(M)

--U(m:NP,n:NP,M:NP,a:CF):CF == 1/sqrt(N(M))*a^((m-M-1)*(n-M-1))

cdftMatrix(M:NP,a:CF):Matrix(CF) ==
  N0:NP:=N(M)
  C:Float:=1/sqrt(N0)
  F:=matrix [[a^((m-M-1)*(n-M-1)) for n in 1..N0] for m in 1..N0]
  return C*F

setupGrid(M:PI):GRID ==
  N:PI:=2*M+1
  L:IF:=sqrt(2*N*pi()$IF)
  dx:IF:=L/N
  dk:IF:=dx
  x:VIF:=dx * vector [j for j in -M..M]
  k:VIF:=dk * vector [j for j in -M..M]
  return [N,L,dx,dk,x,k]
 
hamiltonMatrix(H:(IF,IF)->IF,g:GRID):Matrix(IF) ==
  matrix [[H(g.x.i,g.k.j) for j in 1..g.N] for i in 1..g.N]

-- w:=cos(2*pi()$IF/g.N)::Complex IF +%i*sin(2*pi()$IF/g.N)::Complex IF 
-- w^g.N = 1 ? 
-- ucdftMatrix(w,g)

ucdftMatrix(a:CIF,g:GRID):Matrix(CIF) ==
  M:PI:=(g.N-1)/2
  F := matrix [[a^((m-M-1)*(n-M-1)) for n in 1..g.N] for m in 1..g.N]
  return interval(1/sqrt(g.N::Float))@IF * F

deMoivreNumber(g:GRID):CIF ==
  ++ https://en.wikipedia.org/wiki/Root_of_unity
  cos(2*pi()$IF/g.N)::CIF +%i*sin(2*pi()$IF/g.N)::CIF 

func2vector(f:IF->CIF,g:GRID):VCIF ==
  vector [f(g.x.i) for i in 1..g.N]

signum(i:Integer):Integer ==
  odd? i => -1
  return(1)

hamiltonian(g:GRID,V:IF->IF,h:IF,m:IF):Matrix(IF) ==
  f0:IF := h*h*recip(8*pi()$IF)*recip(m)*recip(g.N::IF)
  f1:IF := f0 * (g.N^2-1)::IF*recip(6::IF)
  f2:IF := pi()$IF*recip(g.N)$IF
  H0:Matrix(IF) := diagonalMatrix [V(g.x.i) + f1 for i in 1..g.N]
  for i in 1..g.N repeat
    for j in 1..i-1 repeat
      a:IF:=(i-j) * f2
      rs2:IF:=recip(sin(a))^2
      --rs case "failed" => does not apply
      c:IF:=cos(a)
      H0(i,j):=H0(j,i):= signum(i-j) * f0 * c * rs2
  return H0
    
midPoint(x:IF):Float == (sup(x)+inf(x))/2

    
-- Examples
--g:=setupGrid(2)
--w:=cos(2*pi()$IF/g.N)::Complex IF +%i*sin(2*pi()$IF/g.N)::Complex IF 
-- w:=deMoivreNumber(g)
---- w^g.N = 1 ? real/imag ...) sup/inf width 
--U:=ucdftMatrix(w,g)
--IU:=ucdftMatrix(conjugate(w),g)
-- interval(1/sqrt(g.N::Float))@IF
--- tests
-- trace(U), trace(IU) @ 1

-- determinant(U), determinant(IU) @1
-- U*IU, IU*U @ Id
-- norm determinant(IU*U) 
-- norm(deMoivreNumber(g)^g.N) 
---- [0.9999999999_9999999966,1.0000000000_000000004]
-- fv:=func2vector(x+->exp(-x^2),g)
-- width norm(fv.10)
-- width norm(fv.(g.N))

-- DG:=diagonalMatrix([interval(1.0)$IF for i in 1..g.N])

-- g:=setupGrid(2)
-- w:=deMoivreNumber(g)
-- H0:=hamiltonian(g,x+->x^2,1$IF,1$IF)

-- HF0:=map(midPoint,H0)
-- HQ0:=map(f+->f::Fraction(Integer),HF0)
-- INEP==>InnerNumericEigenPackage(FRAC INT, Fraction Integer, FRAC INT)
-- Q ==> Fraction Integer
-- NREP ==> NumericRealEigenPackage Float
-- characteristicPolynomial(HQ0,u)
-- realEigenvalues(HQ0,1/10000000)
-- realEigenvalues(HQ0,0.0000001)

-- try hbar^2/2/m=1 => h^2=8*pi^2*m

