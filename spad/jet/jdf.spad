)abbrev domain JDF JetDifferentialForm
++ Description:
++  \spad{JetDifferential(JB, D)} implements differentials (one-forms)
++   over the jet bundle \spad{JB} with coefficients from \spad{D}.
++   The differentials operate on \spad{JetVectorField(JB, D)}.

JetDifferentialForm(JB : JBC, D : JBFC JB) : Exports == Implementation where

  PI   ==> PositiveInteger
  NNI  ==> NonNegativeInteger
  L    ==> List
  B    ==> Boolean
  R    ==> Expression Integer
  JBC  ==> JetBundleCategory
  JBFC ==> JetBundleFunctionCategory
  VF   ==> JetVectorField(JB, D)
  OUT  ==> OutputForm
  
  JDIFF ==> JetDifferential(JB,D)

  Exports ==> Join(JBC,JBFC(JB),Module(D)) with
  
    coerce : JDIFF -> %
    coerce : % -> OUT
    
    generators : () -> List %
    
    d : JB -> %
  
  Implementation ==> add
  
    p:NNI:=numDepVar()$JB
    q:NNI:=numIndVar()$JB
    depVars:List R:=[X(qcoerce k)$JB::R for k in 1..p]
    indVars:List R:=[U(qcoerce k)$JB::R for k in 1..q]
    allVars:List R:= concat(depVars,indVars)
    listVars:List Symbol:=[symbol(v::OUT)$OutputFormTools for v in allVars]
    
    Rep:=DeRhamComplex(Integer, listVars)
    
    generators():List % == [generator(j)$Rep for j in 1..p+q]
    
    d(jb : JB) : % == 
      j:Integer:=position(jb::R,allVars)
      generators().j
    
    coerce(w:JDIFF):% ==
      c:List D:=coefficients(w)$JDIFF
      d:List JB:=differentials(w)$JDIFF
      
      0$Rep
      
    coerce(w:%):OUT == coerce(w)$Rep      
