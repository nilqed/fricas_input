)abbrev domain JASYM JetAntiSymm
JetAntiSymm(JB,R,n) : Exports == Implementation where

  JB   : JetBundleCategory
  R    : JetBundleFunctionCategory JB
  n    : NonNegativeInteger
  
  LALG ==> LeftAlgebra
  FMR  ==> FM(R, EAB)
  FM   ==> FreeModule
  I    ==> Integer
  L    ==> List
  EAB  ==> ExtAlgBasis 
  NNI  ==> NonNegativeInteger
  PI   ==> PositiveInteger
  O    ==> OutputForm
  base ==> k
  coef ==> c
  Term ==> Record(k : EAB, c : R)

  Exports == Join(LALG(R), RetractableTo(R)) with
      leadingCoefficient : %           -> R
        ++ leadingCoefficient(p) returns the leading
        ++ coefficient of antisymmetric polynomial p.
--    leadingSupport       : %           -> EAB
      leadingBasisTerm     : %           -> %
        ++ leadingBasisTerm(p) returns the leading
        ++ basis term of antisymmetric polynomial p.
      reductum           : %           -> %
        ++ reductum(p), where p is an antisymmetric polynomial,
        ++ returns p minus the leading
        ++ term of p if p has at least two terms, and 0 otherwise.
      coefficient        : (%, %)     -> R
        ++ coefficient(p, u) returns the coefficient of
        ++ the term in p containing the basis term u if such
        ++ a term exists, and 0 otherwise.
        ++ Error: if the second argument u is not a basis element.
      generator          : NNI         -> %
        ++ generator(n) returns the nth multiplicative generator,
        ++ a basis term.
      exp                : L I         -> %
        ++  exp([i1, ...in]) returns \spad{u_1\^{i_1} ... u_n\^{i_n}}
      homogeneous?       : %           -> Boolean
        ++  homogeneous?(p) tests if all of the terms of
        ++  p have the same degree.
      retractable?       : %           -> Boolean
        ++  retractable?(p) tests if p is a 0-form,
        ++  i.e., if degree(p) = 0.
      degree             : %           -> NNI
        ++  degree(p) returns the homogeneous degree of p.
      map                : (R -> R, %) -> %
        ++  map(f, p) changes each coefficient of p by the
        ++  application of f.
      indVars : () -> List JB
      depVars : () -> List JB
      symVars : NNI -> List Symbol


--    1 corresponds to the empty monomial Nul = [0, ..., 0]
--    from EAB.  In terms of the exterior algebra on X,
--    it corresponds to the identity element which lives
--    in homogeneous degree 0.

  Implementation == FMR add
      Rep := L Term
      x, y :  EAB
      a, b :  %
      r   :  R
      m   :  I


      indVars() == [X(j::PI)$JB for j in 1..numIndVar()]
      depVars() == [U(j::PI)$JB for j in 1..numDepVar()]

      symVars(m:NNI):List Symbol ==
        if m=0 then
          [name(s)$JB for s in concat(indVars(),depVars())]
        else
          [name(s)$JB for s in variables(m)$JB]

      lVar:List Symbol:=symVars(n)


      dim := #lVar

      1 == [[ Nul(dim)$EAB, 1$R ]]

      coefficient(a, u) ==
        not null u.rest => error "2nd argument must be a basis element"
        x := u.first.base
        for t in a repeat
          if t.base = x then return t.coef
          if t.base < x then return 0
        0

      retractable?(a) ==
        null a or (a.first.k  =  Nul(dim))

      retractIfCan(a):Union(R,"failed") ==
        null a               => 0$R
        a.first.k = Nul(dim) => leadingCoefficient a
        "failed"

      retract(a) : R ==
        null a => 0$R
        leadingCoefficient a

      homogeneous? a ==
        null a => true
        siz := _+/exponents(a.first.base)
        for ta in reductum a repeat
          _+/exponents(ta.base) ~= siz => return false
        true

      degree a ==
        null a => 0$NNI
        homogeneous? a => (_+/exponents(a.first.base)) :: NNI
        error "not a homogeneous element"

      zo : (I, I) -> L I
      zo(p, q) ==
        p = 0 => [1, q]
        q = 0 => [1, 1]
        [0, 0]

      getsgn : (EAB, EAB) -> I
      getsgn(x, y) ==
        sgn : I  := 0
        xx : L I := exponents x
        yy : L I := exponents y
        for i in 1 .. (dim-1) repeat
          xx  := rest xx
          sgn := sgn + (_+/xx)*yy.i
        sgn rem 2 = 0 => 1
        -1

      Nalpha : (EAB, EAB) -> L I
      Nalpha(x, y) ==
        i : I := 1
        dum2 : L I := [0 for i in 1..dim]
        for j in 1..dim repeat
          dum := zo((exponents x).j, (exponents y).j)
          (i := i*dum.1) = 0 => break
          dum2.j := dum.2
        i = 0 => cons(i, dum2)
        cons(getsgn(x, y), dum2)

      a * b ==
        null a => 0
        null b => 0
        ((null a.rest) and (a.first.k = Nul(dim))) => a.first.c * b
        ((null b.rest) and (b.first.k = Nul(dim))) => b.first.c * a
        z : % := 0
        for tb in b repeat
          for ta in a repeat
            stuff := Nalpha(ta.base, tb.base)
            r := first(stuff)*ta.coef*tb.coef
            if r ~= 0 then z := z + [[rest(stuff)::EAB, r]]
        z

      coerce(r) : % ==
        r = 0 => 0
        [ [Nul(dim), r] ]

      coerce(m) : % ==
        m = 0 => 0
        [ [Nul(dim), m::R] ]

      characteristic() == characteristic()$R

      generator(j) ==
        -- j < 1 or j > dim => error "your subscript is out of range"
        -- error will be generated by dum.j if out of range
        dum : L I := [0 for i in 1..dim]
        dum.j := 1
        [[dum::EAB, 1::R]]

      exp(li : (L I)) ==  [[li::EAB, 1]]

      leadingBasisTerm a ==
        [[a.first.k, 1]]

      displayList : EAB -> O
      displayList(x) : O ==
        le : L I := exponents(x)$EAB
--      reduce(_*, [(lVar.i)::O for i in 1..dim | le.i = 1])$L(O)
--        reduce(_*, [(lVar.i)::O for i in 1..dim | one?(le.i)])$L(O)
        reduce(_*, [(lVar.i)::O for i in 1..dim | ((le.i) = 1)])$L(O)

      makeTerm : (R, EAB) -> O
      makeTerm(r, x) ==
      -- we know that r ~= 0
        x = Nul(dim)$EAB  => r::O
--        one? r => displayList(x)
        (r = 1) => displayList(x)
--      r = 1 => displayList(x)
--      r = 0 => 0$I::O
--      x = Nul(dim)$EAB  => r::O
        r::O * displayList(x)

      coerce(a) : O ==
        zero? a     => 0$I::O
        null rest(a @ Rep) =>
                 t := first(a @ Rep)
                 makeTerm(t.coef, t.base)
        reduce(_+, [makeTerm(t.coef, t.base) for t in (a @ Rep)])$L(O)


)abbrev domain JDF JetDifferentialForm
++ Description:
JetDifferentialForm(JB,R,n) : Exports == Implementation where

  JB   : JetBundleCategory
  R    : JetBundleFunctionCategory JB
  n    : NonNegativeInteger
  
  --CoefRing :  Join(Ring, Comparable)
  ASY     ==> JetAntiSymm(JB,R,n)
  DIFRING ==> DifferentialRing
  LALG    ==> LeftAlgebra
  FMR     ==> FreeMod(R, EAB)
  I       ==> Integer
  L       ==> List
  EAB     ==> ExtAlgBasis 
  NNI     ==> NonNegativeInteger
  O       ==> OutputForm

  Exports == Join(LALG(R), RetractableTo(R)) with
      leadingCoefficient : %           -> R
        ++ leadingCoefficient(df) returns the leading
        ++ coefficient of differential form df.
      leadingBasisTerm   : %           -> %
        ++ leadingBasisTerm(df) returns the leading
        ++ basis term of differential form df.
      reductum           : %           -> %
        ++ reductum(df), where df is a differential form,
        ++ returns df minus the leading
        ++ term of df if df has two or more terms, and
        ++ 0 otherwise.
      coefficient        : (%, %)     -> R
        ++ coefficient(df, u), where df is a differential form,
        ++ returns the coefficient of df containing the basis term u
        ++ if such a term exists, and 0 otherwise.
      generator          : NNI         -> %
        ++ generator(n) returns the nth basis term for a differential form.
      homogeneous?       : %           -> Boolean
        ++  homogeneous?(df) tests if all of the terms of
        ++  differential form df have the same degree.
      retractable?       : %           -> Boolean
        ++  retractable?(df) tests if differential form df is a 0-form,
        ++  i.e., if degree(df) = 0.
      degree             : %           -> NNI
        ++  degree(df) returns the homogeneous degree of differential form df.
      map                : (R -> R, %) -> %
        ++  map(f, df) replaces each coefficient x of differential
        ++  form df by \spad{f(x)}.
      totalDifferential    : R -> %
        ++  totalDifferential(x) returns the total differential
        ++  (gradient) form for element x.
      exteriorDifferential : % -> %
        ++  exteriorDifferential(df) returns the exterior
        ++  derivative (gradient, curl, divergence, ...) of
        ++  the differential form df.

  Implementation == ASY add
      Rep := ASY

      listIndVar:List Symbol:=symVars(n)$ASY

      dim := #listIndVar

      totalDifferential(f) ==
        divs := [differentiate(f, listIndVar.i)*generator(i)$ASY for i in 1..dim]
        reduce("+",divs)

      termDiff : (R, %) -> %
      termDiff(r, e) ==
        totalDifferential(r) * e

      exteriorDifferential(x) ==
          x = 0 => 0
          termDiff(leadingCoefficient(x)$Rep, leadingBasisTerm x)
            + exteriorDifferential(reductum x)

      d(s : Symbol) : Symbol ==
          ds :=concat["d",string name(s)]::Symbol
          script(ds, scripts(s))

      lv := [d(liv) for liv in listIndVar]

      displayList : EAB -> O
      displayList(x) : O ==
        le : L I := exponents(x)$EAB
--      reduce(_*, [(lv.i)::O for i in 1..dim | le.i = 1])$L(O)
--        reduce(_*, [(lv.i)::O for i in 1..dim | one?(le.i)])$L(O)
        reduce(_*, [(lv.i)::O for i in 1..dim | ((le.i) = 1)])$L(O)

      makeTerm : (R, EAB) -> O
      makeTerm(r, x) ==
      -- we know that r ~= 0
        x = Nul(dim)$EAB  => r::O
--        one? r => displayList(x)
        (r = 1) => displayList(x)
--      r = 1 => displayList(x)
        r::O * displayList(x)

      terms : % -> List Record(k : EAB, c : R)
      terms(a) ==
        -- it is the case that there are at least two terms in a
        a pretend List Record(k : EAB, c : R)

      coerce(a) : O ==
        a           = 0$Rep => 0$I::O
        ta := terms a
--      reductum(a) = 0$Rep => makeTerm(leadingCoefficient a, a.first.k)
        null ta.rest => makeTerm(ta.first.c, ta.first.k)
        reduce(_+, [makeTerm(t.c, t.k) for t in ta])$L(O)
  

