-- =========================
-- JBG tests (file jbg.spad)
-- =========================
-- Requires:
-- .... CellMap (scmplx.spad).
-- .... SurfaceComplex (scmplx.spad).
-- .... DifferentialForms (dform.spad)
-- .... Fricas 1.3+, or DeRhamComplex patch
-- Version 1.1: 09-ARP-2016
-- Version 1.2: 17-DEC-2016
--
-- FriCAS Computer Algebra System
-- Version: FriCAS 1.3.0
-- Timestamp: Don Sep 29 21:26:01 CEST 2016

)set break resume
)expose UnittestCount UnittestAux Unittest

--)co ../dform/devel/src/dform
--)co ../scmplx/scmplx
)lib CMAP SCMPLX DFORM
)co jbg
)expose CMAP, SCMPLX, DFORM, JBG
)sh JBG

------------------
testsuite "jbg"
testcase  "all"
------------------

N:=1 -- number of tests
res:List(Boolean):=[false for j in 1..N] -- Result list



M ==> JBG([x,y],[u,v,w])

dX:=indForms()$M
dU:=depForms()$M

X:=indVars()$M
U:=depVars()$M

XS:=indSymbols()$M
US:=depSymbols()$M

--
a:=operator 'a
a(U.1,U.2)*dU.1
d %
--

U(1)$M --> u
X(2)$M --> y


JB==>JetBundle(XS,US)
JBX==>JetBundleExpression(JB)
JD==>JetDifferential(JB,JBX)
JVF==>JetVectorField(JB,JBX)

d (X.1)$JD --> JetDifferential(JetBundle([x,y],[...
d (U.1)$JD --> ...

dU(2) --> DeRhamComplex(Integer,[u,v,w]), same as dU.2
dU(2)$JD --> dv but JetDifferential(JetBundle([x,y],...

S:=makeSystem([U.1-X.1,U.2-X.2,U.3-X.1*X.2])$JDE(JB,JBX)
jacobiMatrix(S)
order S --> 0
prolong S --> 0
eqs:=retract S

-- vector field
V:=2*diffX(1)$JVF+a(X.1)*diffX(2)$JVF
directions(V)
lie(V,diffX(1)$JVF)
--

F:=cellMap([0..1,0..1],q+->[q.2,-q.1,sin(q.1*q.2)])$CellMap(INT,3)
Y:=F indVars()$M --
pullBack(F,dU.1)$M

DERX==>DERHAM(INT,indSymbols()$M)
DERU==>DERHAM(INT,depSymbols()$M)
1$DERX
[d (s*1$DERX) for s in Y]

f:=a(u,v)*dU.1*dU.3
lf:=leadingBasisTerm(f)
lc:=leadingCoefficient(f)
abt:=atomizeBasisTerm(lf)
bf:=baseForms()$DFORM(INT,depVars()$M)
[position(x,bf) for x in abt] 

pullBack(F,f)$M --  - y a(y,- x)cos(x y)dx dy

pullBack(F,dU.1*dU.2*dU.3)$M -- 0
pullBack(F,dU.1*dU.2)$M -- dx dy
pullBack(F,dU.1*dU.3)$M -- - y cos(x y)dx dy

pullBack(F,dU.1+f*tan((dvars()$M).2))$M

-- todo: empty list
-- pullBack(F,1$DERU)$M -- >> Error detected within library code:
-- reducing over an empty list needs the 3 argument form
-- !done!
pullBack(F,1$DERU)$M
pullBack(F,a(u)*1$DERU)$M
pullBack(F,a(u,v)*1$DERU)$M
pullBack(F,a(u,v,w)*1$DERU)$M
pullBack(F,0$DERU)$M

G:=cellMap([0..1,0..1],q+->[q.1^2,q.2^2,1])$CellMap(INT,3)
pullBack(G,dU.1*dU.2)$M -- 4x y dx dy

-------------------------------------------------------------------------
R==>EXPR INT
)clear value a
-- 3-cell [0,a]x[0,2*pi]x[0,2*%pi]
Q:=[0..a::R,0..2*%pi,0..2*%pi]

-- H mapping [Z.1,Z.2,Z.3H] -> [x,y,z]
H0:List R -> List R
H0:=Z+->[Z.1*cos(Z.2),(b+Z.1*sin(Z.2))*cos(Z.3),(b+Z.1*sin(Z.2))*sin(Z.3)]
H:=cellMap(Q,H0)$CellMap(INT,3)

M2 ==> JBG([x,y,z],[u,v,w])

dX:=indForms()$M2
dU:=depForms()$M2

X:=indVars()$M2
U:=depVars()$M2

XS:=indSymbols()$M2
US:=depSymbols()$M2   

pullBack(H,1$DERU)$M2

vf:=pullBack(H,dU.1*dU.2*dU.3)$M2

simplify leadingCoefficient(vf)  -- cmp. Rudin Example 10.47 (SCMPLX)


pullBack(H,u*1$DERU)$M2
pullBack(H,v*1$DERU)$M2
pullBack(H,w*1$DERU)$M2
pullBack(H,u*v*w*1$DERU)$M2


-- makeSection

eq1:=U.1=sin(X.2)
eq2:=U.2=cos(X.2-X.1)
eq3:=U.3=(X.3-X.1)^2

eqs:=[eq1,eq2,eq3]

-- S1 := makeSection [eq1,eq2,eq3]
S1 := makeSection(eqs)$M2     

lhsm2:List JBX:= [lhs eq for eq in eqs]
sU:Set(JBX):=set(U)
slhs:Set(JBX):=set(lhsm2)
subset?(sU,slhs)

jacobiMatrix S1
retract S1

freeOf?(lhs(eq1),U.1)$JBX

-- M
XM:=indVars()$M
UM:=depVars()$M

eq1:=UM.1=XM.1
eq2:=UM.2=XM.2
eq3:=UM.3=exp(-XM.1^2-XM.2^2)

S2 := makeSection [eq1,eq2,eq3]

jacobiMatrix S2  -- note that u part is (-)
retract S2
prolong S2
order S2

-- JetDifferential
dX.1 -- DeRhamComplex(Integer,[x,y,z])
(dX.1)$JD -- JetDifferential(JetBundle([x,y,z], ...

-------------
-- Results --
-------------
)version
)lisp (lisp-implementation-type)
)lisp (lisp-implementation-version)

res
reduce(_and,res)

-- dummy statistics
[testEquals("res." string(j),"true") for j in 1..N];
statistics()

