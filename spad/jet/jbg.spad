\iffalse
)lisp (setq |$inclAssertions| nil)
)abbrev package JBG JetBundleGeometry
++ Author: Kurt Pagani
++ Date Created: Sun Jan 01 23:25:52 CET 2017
++ License: FriCAS/BSD
++ Required: JetBundleXYZ (all), FriCAS 1.3 or later
++   DeRhamComplex, DifferentialForms, SurfaceComplex
++   CellMap
++ References: 
++ Description:
++
JetBundleGeometry(xs,us) : Exports == Implementation where

  R   ==> Expression Integer
  LS  ==> List Symbol
  LB  ==> List Boolean
  PI  ==> PositiveInteger 
  NNI ==> NonNegativeInteger

  xs: LS
  us: LS
 
  JB   ==> JetBundle(xs,us)
  JBX  ==> JetBundleExpression JB
  JDE  ==> JetDifferentialEquation(JB,JBX)
  JVF  ==> JetVectorField(JB,JBX)
  JDF  ==> JetDifferential(JB,JBX)
  
  
  JBC  ==> JetBundleCategory
  JBFC ==> JetBundleFunctionCategory(JB)
  
  DRCX ==> DeRhamComplex(Integer,xs)
  DRCU ==> DeRhamComplex(Integer,us)
  
  DFX  ==> DifferentialForms(Integer,xs)
  DFU  ==> DifferentialForms(Integer,us)
 
  Exports == Join(JBC,JBFC) with
    
    ivars : () -> List R
    dvars : () -> List R
    
    indVars : () -> List JBX
    depVars : () -> List JBX

    indSymbols : () -> LS
    depSymbols : () -> LS

    indForms : () -> List DRCX
    depForms : () -> List DRCU
    
    getJB  : () -> Type
    getJBX : () -> Type
    getJDE : () -> Type
    getJVF : () -> Type
    getJDF : () -> Type
    
    
    pullBack : (CellMap(Integer,#us),DRCU) -> DRCX
      ++ pullBack(S,w) computes the pull back of the differential
      ++ form w by the cell map S.

    pullBack : (JDE,DRCU) -> DRCX
      ++ pullBack(S,w) computes the pull back of the differential
      ++ form w by the 0-section of an instance of JetDifferentialEquation
      ++ which necessarily must be of order 0 as well.

    makeSection : List Equation JBX -> JDE
      ++ makeGraph(eqs) creates a 0-th order system provided that 
      ++ the equations are of the form u=f(x), i.e. G_u(x)=(x,f(x))
      ++ is a function graph.
    --coerce : % -> OutputForm
	
	
  Implementation == JBX add         
        
    ivars() == [coerce(s)$R for s in xs]
    dvars() == [coerce(s)$R for s in us]
    
    indVars() == [X(k::PI)$JBX for k in 1..#xs]
    depVars() == [U(k::PI)$JBX for k in 1..#us]

    indSymbols() == xs
    depSymbols() == us

    indForms() == baseForms()$DFX
    depForms() == baseForms()$DFU

    getJB()  == JB
    getJBX() == JBX
    getJDE() == JDE
    getJVF() == JVF
    getJDF() == JDF

    pullBack(S:CellMap(Integer,#us),w:DRCU):DRCX ==
      k:=#getDom(S)
      k ~= #xs => error "Domain does not match."
      Y:= S ivars() 
      X:= dvars()
      DY:List DRCX:= [d(s*1$DRCX)$DFX for s in Y] -- new forms
      bf:=baseForms()$DFU
      nf:=0$DRCX
      while w ~= 0$DRCU repeat
        lf:=leadingBasisTerm(w)
        lc:=leadingCoefficient(w)
        abt:=atomizeBasisTerm(lf)$DFU
        if abt ~= [] then
          pos:=[position(x,bf) for x in abt]
          yl:List DRCX:=[DY.j for j in pos]
          nbt:DRCX:=reduce("*",yl)
        else
          nbt:DRCX:=1$DRCX
        nc:R:=subst(lc,[X.j = Y.j for j in 1..#X])
        nf:=nf+nc*nbt
        w:=reductum(w)
      nf
      

    pullBack(de:JDE, w:DRCU):DRCX ==
      order de ~= 0 => error "Zero order system required."
      eqs:List JBX:=retract(de)$JDE
      0$DRCX -- dummy

    makeSection(eqs:List Equation JBX):JDE ==
      #eqs ~= #us => error "#Equations must match #u"
      lh:List JBX:= [lhs eq for eq in eqs]
      rh:List JBX:= [rhs eq for eq in eqs]
      X:List JBX:=indVars()
      U:List JBX:=depVars()
      chk1:LB:=concat([[freeOf?(s,U.j)$JBX for s in rh] for j in 1..#U])
      not reduce(_and,chk1) => error "Found dependent vars on rhs."
      sU:Set(JBX):=set(U)
      slh:Set(JBX):=set(lh)
      not subset?(sU,slh) => error "Incomplete dependencies."     
      sys:List JBX:= [lh.j-rh.j for j in 1..#us]
      makeSystem(sys)$JDE




)if false
\fi
variables(1)$JBG

--JBG1 ==> JetBundleGeometry(x=0..6,q=1..2)
--ivars()$JBG1
--dvars()$JBG1

JBG ==> JetBundleGeometry(['x,'y],['u,'v,'w])
 X:=indVars()$JBG
 U:=depVars()$JBG
 U.1 = X.1^2+sin(X.2)
 D(rhs %,'x)
  variables(1)$JBG -- ok!

JetBundleGeometry
(10) -> U(1)$JB1 = (X(1)$JBX1)^2

              2
   (10)  u = x
                Type: Equation(JetBundleExpression(JetBundle([x,y,z],[u,v])))
(11) -> U(1)$JB1 := (X(1)$JBX1)^2
   Internal Error
   The attributed tree form|JetBundle|is not a vector.

(11) -> U(1)$JB1 = (X(1)$JBX1)^2

              2
   (11)  u = x
                Type: Equation(JetBundleExpression(JetBundle([x,y,z],[u,v])))
(12) -> U(1)$JB1

   (12)  u
                                               Type: JetBundle([x,y,z],[u,v])
)endif