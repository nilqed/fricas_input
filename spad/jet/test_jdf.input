)co jdf
)show JDF
jb := IJB('x, 'u, 'p, 4, 3)
jbe := JBE jb
JDF0==>JDF(jb,jbe,0)
df:=[generator(j)$JDF0 for j in 1..7]
X:=indVars()$JASYM(jb,jbe,0)
sin(X.1)$jbe
paren((X.1)::jbe)^6*df.2
exteriorDifferential %
(X.1)::jbe^6*df.1

a:BOP:=operator 'a
a(X.1::jbe,X.2::jbe)   -- conv to jbe necessary, jb not enough!
a(X.1::jbe,X.2::jbe)::JDF0
exteriorDifferential % -- ok

exteriorDifferential (sin(X.1)$jbe::JDF0)

dd ==> exteriorDifferential
dd(X.4*df.2*df.3)

JD ==> JetDifferential(jb,jbe)
V:=variables(1)$jb
f1:=d(V.1)$JD
f2:=5*d(V.2)$JD

coefficient(f1,V.1) -- 1
coefficient(f1,V.2) -- 0
coefficient(f2,V.2) -- 5

differentials(f2+f1+d(V.12)$JD)$JD -- [x1,x2,p^2_2]

coefficients(f1+f2+d(V.12)$JD)$JD -- [1,5,1] -- useful when combined with with above

cos(V.1)$jbe * 1$JDF0
dd %

symVars(0)$JASYM(jb,jbe,0)
symVars(1)$JASYM(jb,jbe,0)

-- convert JD to JDF and vice versa if possible 

q:=f1+f2
q::JDF0

qq:=V.4*f1+V.5*f2
qq::JDF0

--^^^ ok, up to order (reversed) 
-- reverse ta in coerce -> ok

leadingBasisTerm (qq::JDF0)
-- reverse better?

D1:=diff(X.1)$JetVectorField(jb,jbe)
eval(D1,X.1)
