)abbrev package IO InputOutput
++ Author: Kurt Pagani
++ Date Created: Fri Dec 04 02:10:38 CET 2015
++ License: BSD (same as Axiom)
++ Date Last Updated:
++ Basic Operations: 
++ Related Domains: 
++ Keywords: 
++ Examples:
++ References:
++
++ Description:
++ 
++
InputOutput() : Exports == Implementation where
  
  STR ==> String
  TXT ==> TextFile
  STS ==> Stack(String)
  
  
  Exports ==  with

    isComment? : STR -> Boolean
      ++ True if string starts with "--" or "++"
    
    isContinuation? : STR -> Boolean
      ++ True if string ends in "_"
      
    isIndent? : STR -> Boolean
      ++ True if string has leading spaces but is not the empty line
      
    isEmpty? : STR -> Boolean
      ++ True if empty string
      
    combineCont : List(STR) -> STR
      ++ Combine continuation lines into a single string
      ++ adding newline characters
    
    inputToNotebook : STR -> STR
      ++ Convert .input to .ipynb (no piles only!)
      
    readInputFile: STR -> List(STR)
      ++ Read input file to a list of strings 
      ++ escaping strings in strings
      	
	
  Implementation ==  add 
    
     
    writeCodeCell(f:TXT,s:STR):STR ==
      writeLine!(f,"{")
      writeLine!(f,"_"cell_type_" : _"code_",")
      writeLine!(f,"_"execution_count_": null,")
      writeLine!(f,"_"metadata_" : {")
      writeLine!(f,"    _"collapsed_" : false")
      writeLine!(f,"},")
      h:STR:=concat ["_"source_" : [_"" ,s, "_"],"]
      writeLine!(f,h)
      writeLine!(f,"_"outputs_": []")
      writeLine!(f,"}")
      s


    writeMarkdownCell(f:TXT,s:STR):STR ==
      writeLine!(f,"{")
      writeLine!(f,"_"cell_type_" : _"markdown_",")
      writeLine!(f,"_"metadata_" : {},")
      h:STR:=concat ["_"source_" : [_"" ,s, "_"]"]
      writeLine!(f,h)
      writeLine!(f,"}")
      s
      

    writeHeader(f:TXT,nb:STR):Boolean ==
      writeLine!(f,"_"metadata_": {")
      writeLine!(f," _"kernelspec_": {")
      writeLine!(f,"  _"display_name_": _"FriCAS_",")
      writeLine!(f,"  _"language_": _"spad_",")
      writeLine!(f,"  _"name_": _"ifricas_"")
      writeLine!(f," },")
      writeLine!(f," _"language_info_": {")
      writeLine!(f,"  _"codemirror_mode_": _"spad_",")
      writeLine!(f,"  _"mimetype_": _"text/x-spad_",")
      writeLine!(f,"  _"name_": _"SPAD_",")
      writeLine!(f,"  _"pygments_lexer_": _"spad_",")
      writeLine!(f,"  _"version_": _"1.2.6_"")
      writeLine!(f," },")
      h:STR:=concat[" _"name_": _"",nb,"_""]
      writeLine!(f,h)
      writeLine!(f,"},")
      writeLine!(f,"_"nbformat_": 4,")
      writeLine!(f,"_"nbformat_minor_": 0")
      true
      

    isComment?(s) ==
      #s < 2 => false
      elt(s,1..2)="--" => true
      elt(s,1..2)="++" => true
      false


    isContinuation?(s) ==
      s:=rightTrim(s,char(32))
      s="" => false
      s(#s) = char "__" => true
      false


    isIndent?(s) ==
      s="" => false
      isContinuation?(s) => false
      s.1 = char(32) => true
      false

    isEmpty?(s) ==
      s="" => true
      false


    combineCont(l) ==
      -- combine [s1_,s2_,...,sn_,s0] -> s
      cnt:=(x:STR):STR+->concat(rightTrim(x,char 32),"\n")
      ll:=map(cnt,l)
      concat(ll)


    escapeQM(s:STR):STR ==
      esc:=(x:Character):STR+->(if x=char "_"" then "\_"" else x::STR)
      r:List(STR):=[esc(s.i) for i in 1..#s]
      concat(r)


    readInputFile(f) ==
      fi:FileName:=f::FileName
      ~exists?(fi) => error "No such file."
      f1: TextFile := open(fi,"input")
      l:List(String):=[]
      s:String
      while not endOfFile? f1 repeat
        s := readLine! f1
        s := escapeQM s
        l:=concat(l,s)
      close! f1
      l  
        
 
    writeComment(f:TXT,S:STS):STR ==
      r:STR:=""
      while not empty? S repeat
        s:=pop! S
        s:=leftTrim(s, char "-")
        s:=concat(s,"\n")
        r:=concat(s,r)
      writeMarkdownCell(f,r)
      
    writeContinuation(f:TXT,S:STS):STR == 
      r:STR:=""
      while not empty? S repeat
        s:=pop! S
        s:=concat(s,"\n")
        r:=concat(s,r)
      writeCodeCell(f,r)


    writeCode(f:TXT,S:STS):STR == 
      r:STR:=""
      while not empty? S repeat
        s:=pop! S
        s:=concat(s,"\n")
        r:=concat(s,r)
      r:=r.(1..#r-2)
      writeCodeCell(f,r)


    inputToNotebook(f) ==
      fo:FileName:=concat(f,".ipynb")::FileName
      exists?(fo) => error "File already exists."
      f2: TextFile := open(fo,"output") 
      writeLine!(f2,"{")
      writeLine!(f2," _"cells_": [")
      --
      L:List(String):=readInputFile(concat(f,".input"))
      --
      SL:Stack(String):=stack L
      CO:Stack(String):=stack [] -- comments
      CN:Stack(String):=stack [] -- continuations
      CI:Stack(String):=stack [] -- piles or single line code
      RS:Stack(String):=stack []      
      --
      while not empty? SL repeat
        s:=pop! SL
        while isEmpty?(s) and not empty?(SL) repeat 
          s:=pop! SL
        -- no empty line from here
        if empty? SL then
          t:STR:=""
        else
          t:=top SL
        --  
        if isComment? s then
          push!(s,CO)
          if not isComment? t then
            writeComment(f2,CO)
            writeLine!(f2,",")
        --
        if isContinuation? s then
          push!(s,CN)
          if not isContinuation? t  then
            push!(pop! SL, CN)
            writeContinuation(f2,CN)
            writeLine!(f2,",")
        --
        if isIndent? s then
          push!(s,CI)
          if not isIndent? t then
            writeCode(f2,CI)
            writeLine!(f2,",")
        --
        if not (isIndent?(s) or isComment?(s) or isContinuation?(s)) then
          push!(s,CI)
          if not isIndent? t then
            writeCode(f2,CI)
            writeLine!(f2,",")            
      --  
      if not empty? CI then 
        writeCode(f2,CI)
        writeLine!(f2,",")
      writeCodeCell(f2,"--\n-- EOF\n--")
      writeLine!(f2," ],")
      writeHeader(f2,fo::STR)
      writeLine!(f2,"}")
      close! f2
      fo::STR
        