)abbrev package TYPEPKG TypePackage
TypePackage (T : Type) : Exports == Implementation where
  Exports == with
    typeof : T -> Type
  Implementation  == add
    typeof(x:T) == T

)abbrev package CMPTYPE CompareTypes
CompareTypes(T:Type,S:Type):Exports == Implementation  where
  SEX ==> SExpression
  Exports == with
    sameType? : (T, S) -> Boolean
  Implementation  == add

    import TypePackage(T)
    import TypePackage(S)

    sameType?(x:T,y:S):Boolean ==
      test ( typeof(x)::SEX = typeof(y):: SEX )


)abbrev package ROU RootOfUnity
RootOfUnity(R: Ring) : Exports == Implementation where

  CI  ==> Complex Integer
  ECI ==> Expression CI 

  Exports == with

    principalRoot? : (R,PositiveInteger) -> Boolean
      ++ principalRoot?(a,n) checks if a is a n-th principal root of unity. 
    
      
  Implementation == add
    
    principalRoot?(r:R,n:PositiveInteger):Boolean ==
      sameType?(r,sample()$ECI)$CompareTypes(R,ECI) => error "use complex ..."
      r = 1::R => false
      r^n ~= 1::R => false
      lr:List R:=[reduce(_+,[r^(j*k) for j in 0..n-1]) for k in 1..n-1]
      lb:List Boolean:=[test(x=0) for x in lr]
      reduce(_and,lb)



)abbrev package DFT DiscreteFourierTransform
++ Author: Kurt Pagani
++ Date Created: Wed Mar 02 23:13:52 CET 2016
++ License: BSD
++ References: en.wikipedia.org/wiki/Discrete_Fourier_transform_%28general%29
++ Description: Discrete Fourier transform (DFT) over any ring, commonly called
++   a number-theoretic transform (NTT) in the case of finite fields.  
++   Given a ring R and a principal n-th root of unity a, the package designator
++   DFT(R,n,a) is used to compute the various objects: dftMatrix()$DFT(R,n,a)
++   for instance, will compute and display a matrix M (the DFT matrix) such
++   the discrete Fourier transform of the vector v is given by M*v. 
++ Examples: see dft_test.input

DiscreteFourierTransform(R,n,a) : Exports == Implementation where
  
  R:Ring
  n:PositiveInteger
  a:R
  
  MATR ==> Matrix R
  
  Exports ==  with
    
    dftMatrix  : () -> MATR
      ++ dftMatrix() computes and returns the DFT(R,n,a) matrix.  
    dftInvMatrix : () -> MATR
      ++ dftInvMatrix() computes and returns the inverse DFT(R,n,a) matrix.
    principalRoot? : (R,PositiveInteger) -> Boolean
      ++ principalRoot?(a,n) checks if a is a n-th principal root of unity.
    dftMatrix? : MATR -> Boolean
      ++ dftMatrix?(M) checks whether M is a DFT matrix (true) or not.
      ++ This includes a verification of a being a n-th principal root.
    dft  : Vector R -> Vector R
      ++ dft(v) performs the DFT of the vector v.
    idft : Vector R -> Vector R
      ++ idft(v) performs the inverse DFT of the vector v.
	
	
  Implementation ==  add 

    err1 := "Not given a principal n-th root of unity." 
    err2 := "Not invertible."
    err3 := "Wrong dimension of vector."

    principalRoot?(r:R,m:PositiveInteger):Boolean ==
      r = 1::R => false
      r^m ~= 1::R => false
      l1:List R:=[reduce(_+,[r^(j*k) for j in 0..m-1]) for k in 1..m-1]
      l2:List Boolean:=[test(x=0) for x in l1]
      l:=reduce(_and,l2)

    dftMatrix?(m:Matrix R):Boolean ==
      a^n ~= 1::R => false 
      r1:List R:=[reduce(_+,entries(row(m,k))) for k in 2..n]
      r2:List Boolean:=[test(x=0) for x in r1]
      r:=reduce(_and,r2)
    
    dftMatrix() ==
      m:MATR:=matrix [[a^(i*j) for i in 0..n-1] for j in 0..n-1]
      dftMatrix?(m) => m
      error err1
      
    dftInvMatrix() ==
      b:=recip(a)
      c:=recip(n*1::R)
      if b case R and c case R then 
        m:MATR:=c * matrix [[b^(i*j) for i in 0..n-1] for j in 0..n-1]
      else
        error err2
 
    dft(v) ==
      #v ~= n => error err3
      dftMatrix() * v
      
    idft(v) ==
      #v ~= n => error err3
      dftInvMatrix() * v      
 
   
-- Examples
-----------
-- R:=IntegerMod 5
-- a:=2::R
-- n:=4
-- DFTZ5==>DFT(R,n,a)
-- dftMatrix()$DFTZ5
-- dftInvMatrix()$DFTZ5
-- dft([1,2,3,4])$DFTZ5
-- idft([0,4,3,2])$DFTZ5
   
-- R:=Expression Complex Integer
-- n:=3   
-- a:=exp(-2*%i*%pi/n)
-- ...   


