X  ==> Expression Complex Integer
K  ==> Kernel(X)
MX ==> Matrix X
VX ==> Vector X
LX ==> List X

RR ==> RewriteRule(Integer,Complex Integer,X)

-- simplify e^{i*pi*m/n} if m>n

simp1(f) ==
    tf := tower(f)
    tf1 := tf
    sl0 : List(K) := []
    sl1 : List(X) := []
    while not empty?(tf1) repeat
        k := first(tf1)
        tf1 := rest(tf1)
        not is?(k, 'exp) => "iterate"
        k1 := simp2(k, sl0, sl1)
        if k::X ~= k1 then
            sl0 := cons(k, sl0)
            sl1 := cons(k1, sl1)
    subst(f, sl0, sl1)
 
simp2(k,sl0,sl1) ==
    a := first(argument(k))
    a := subst(a, sl0, sl1)
    b:=imag(a)
    a ~= %i*b => error "not imag"
    not is?(tower(b).1,'pi) => error "not pi"
    c:=b/%pi
    not rational?(c) => error "not rat"
    n:=numer(c)::Integer
    d:=denom(c)::Integer
    (-1)^(n quo d)*exp(%i*%pi*(n rem d)/d) 
        

-- e(m,n)=(a_n)^m
--
e(m,n) == exp(-2*%pi*%i*(m rem n)/n)

dftMatrix(n)  == matrix [[e(i*j,n) for i in 0..n-1] for j in 0..n-1]
idftMatrix(n) == matrix [[e(-i*j,n) for i in 0..n-1] for j in 0..n-1]/n

udftMatrix(n)  == dftMatrix(n)/sqrt(n)
iudftMatrix(n) == idftMatrix(n)*sqrt(n)

--
M:=udftMatrix(3)
determinant(M)
IM:=iudftMatrix(3)
M*IM
IM*M
--

-- strange
fracrule():RR == rule
  exp((m|integer? m)/(n|integer? n)*%i*'%pi) ==
    (-1)^(m quo n)*exp('%i*%pi*(m rem n)/n)
    

simpl(s) ==
  s:=simp1(s)
  s:=complexNormalize(s)
  s:=simplify(s)
  s:=simp1(s)
  s
  

dft(v)   == vector [simpl s for s in (dftMatrix(#v)*v)::LX]
udft(v)  == vector [simpl s for s in (udftMatrix(#v)*v)::LX]
idft(v)  == vector [simpl s for s in (idftMatrix(#v)*v)::LX]
iudft(v) == vector [simpl s for s in (iudftMatrix(#v)*v)::LX]

--
v:=dft(vector([j for j in 1..20]))
iv:=idft(v)

[complex(numeric(real s),numeric(imag s)) for s in iv::List X]

--)quit