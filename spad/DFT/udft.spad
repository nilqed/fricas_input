)abbrev package UDFT UnitaryDiscreteFourierTransform

UnitaryDiscreteFourierTransform() : Exports == Implementation where
  
  X ==> Expression Integer
  Q ==> Fraction Integer
  C ==> Complex X
  
  PI  ==> PositiveInteger
  NNI ==> NonNegativeInteger
  
  Exports == with
    
    udftMatrix    : NNI -> Matrix C
    udftInvMatrix : NNI -> Matrix C
    
    udft  : Vector C -> Vector C
    iudft : Vector C -> Vector C
	
	
  Implementation == add 
      
    --import from ComplexTrigonometricManipulations(X,C)
    import from TranscendentalManipulations(X,C)
    

    udftMatrix(n:NNI):Matrix C ==
      q:X:=(2/n)::Q::X
      p:X:=pi()::X
      z:C:=complex(0,-q*p)
      a:C:=exp(z)
      c:C:=1/sqrt(n::C)::C
      c * matrix [[a^(i*j rem n) for i in 0..n-1] for j in 0..n-1] 
    
     
    udftInvMatrix(n:NNI):Matrix C == 
      q:X:=(2/n)::Q::X
      p:X:=pi()::X
      z:C:=complex(0,q*p)
      a:C:=exp(z)
      c:C:=1/sqrt(n::C)::C
      c * matrix [[a^(i*j rem n) for i in 0..n-1] for j in 0..n-1]
     
 
    udft(v) == udftMatrix(#v) * v
      
    iudft(v) == udftInvMatrix(#v) * v      

-- Example
--  x:=udft([j for j in 1..14])
--  y:=iudft(x)::List(EXPR INT)
--  z:=[numeric(real s) for s in y]
   