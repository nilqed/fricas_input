)abbrev package SYMPACK SymbolicPackage
++ Author: Kurt Pagani
++ Date Created: Sat Dec 10 03:15:27 CET 2016
++ License: BSD
++ References:
++ Description:
++
SymbolicPackage() : Exports == Implementation where
  
  --optional type declarations, e.g.
  --PINT   ==> Polynomial(Integer)
  --SBPINT ==> SegmentBinding(PINT)
  OUT ==> OutputForm
  INP ==> InputForm
  SEX ==> SExpression
  
  Exports ==  with
    
    coerce : OUT -> INP
    coerce : INP -> OUT
    
    _# : OUT -> Integer
    atom? : OUT -> Boolean
    
    var : Symbol -> OUT
    
    car : OUT -> OUT
    cdr : OUT -> OUT
    
    destruct : OUT -> List OUT
    flatten  : OUT -> OUT
    
    declare : (OUT,SExpression) -> Symbol
    
    commute : OUT -> OUT

	
  Implementation == OutputForm add 
   
    coerce(x:OUT):INP == x pretend INP
    coerce(x:INP):OUT == x pretend OUT

    _#(x:OUT):Integer == #(x::INP)
    atom?(x:OUT):Boolean == atom?(x::INP)

    var(s:Symbol):OUT == s::OUT
    
    car(x:OUT):OUT == car(x::INP)::OUT
    cdr(x:OUT):OUT == cdr(x::INP)::OUT
    
    destruct(x:OUT):List OUT == 
      d:List INP:=destruct(x::INP)
      [t::OUT for t in d]
      
    flatten(x:OUT):OUT == flatten(x::INP)::OUT
    
    declare(x:OUT,T:SExpression):Symbol ==
      s:Symbol:=symbol(x::INP)
      declare(s,T)$Lisp
      s
 
    --
    commute(x:OUT):OUT ==
      #x <= 2 => x
      l:=destruct x
      l.1 = outputForm("+"::Symbol) => l.3 + l.2
      l.1 = outputForm("*"::Symbol) => l.3 * l.2
      x
      