)abbrev domain ASMPLX AbstractSimplex
++ Author: 
++ Date Created: Fri Oct 17 20:09:39 CEST 2014
++ License: BSD (Axiom)
++ Date Last Updated:
++ Basic Operations: 
++ Related Domains: 
++ Also See:
++ AMS Classifications:
++ Keywords: 
++ Examples:
++ References:
++
++ Description: An element of this domain is an abstract simplex,
++ determined by a non-empty, finite and duplicate-free list of 
++ positive integers. The order is given by the list index.   
++
AbstractSimplex() : Exports == Implementation where
  
  NNI ==> NonNegativeInteger
  PI  ==> PositiveInteger

  
  Exports == Join(CoercibleTo OutputForm, ConvertibleTo String) with
    
    coerce : List(PI) -> %
    ++ Coerce a list of positive integers (vertex labels) to an abstract 
    ++ simplex.
    ++X [1,2,3]::AbstractSimplex()
    
    coerce : % -> List(PI)
    ++ Coerce an abstract simplex to a list of positive integers (vertex 
    ++ labesl)
    ++X [1,2,3]::List(PI)
    
    dim : % -> NNI
    ++ Return the dimension of the abstract simplex which is the number
    ++ of vertices minus 1.
    ++X dim([1,2,3]) => 2
    
    vertices : % -> List(%)    -- 0-faces
    ++ Return the list of vertices as a list of 0-faces.
    ++X vertices [1,2,3] => [[1],[2],[3]]
    
    edges    : % -> List(%)    -- 1-faces
    ++Return the list of edges as a list of 1-faces.
    ++X vertices [1,2,3] => [[1,2],[1,3],[2,3]]
    
    facets   : % -> List(%)    -- (n-1)-faces is dim(s)=n.
    ++Return the list of facets as a list of (n-1)-faces.
    ++X vertices [1,2,3,4] => [[2,3,4],[1,3,4],[1,2,4],[1,2,3]]	
	
  Implementation == List(PI) add
  
    Rep := List(PI)
      
    coerce(s:List(PI)):% == 
      ss := removeDuplicates s
      ss ~= s => error "Not a simplex; duplicate labels"
      ss
    
    coerce(s:%):List(PI) == s::Rep
    
    dim(s:%):NNI ==
      l:=(#s)::PI
      (l-1)::NNI
     
    vertices(s:%):List(%) ==
      [[j] for j in s]
      
    edges(s:%):List(%) ==
      L:=[]::List(%)
      for x in s repeat
        for y in s | x<y repeat
          L:=concat(L,[x,y])
      L
            
      
    facets(s:%):List(%) ==
      [remove(s(j),s) for j in 1..#s]
      
  
  
)abbrev domain ASCH AbstractSimplicialChain
++ Author: 
++ Date Created:
++ License: 
++ Date Last Updated:
++ Basic Operations: 
++ Related Domains: 
++ Also See:
++ AMS Classifications:
++ Keywords: 
++ Examples:
++ References:
++
++ Description:
++ An element of AbstractSimplicialChain is a formal sum of elements 
++ of AbstractSimplex with integer multiplicity. In other words it is
++ the free abelian group on the set of abstract simplices with integer
++ coefficients. 
++
AbstractSimplicialChain(): Exports == Implementation where
  
  NNI ==> NonNegativeInteger
  PI  ==> PositiveInteger
  INT ==> Integer
  
  ASMPLX ==> AbstractSimplex
  
  Exports == Join(AbelianGroup , CoercibleTo OutputForm, RetractableTo ASMPLX) with
    
    coerce : List(PI) -> %
    ++ Coerce a list of positive integers (vertex labels) to an abstract 
    ++ simplicial chain (actually identical to [...]::ASMPLX::ASCH).
    ++X [1,2,3]::AbstractSimplicialChain()
    
    bdry : % -> %
    ++ Compute the boundary of an abstract simplicial chain.
    ++X  bdry ([1,2,3]::ASCH ) =>  [1,2] - [1,3] + [2,3]  
    --coerce : % -> OutputForm
    
	
  Implementation == FreeAbelianGroup(ASMPLX) add   

    Rep:=FreeAbelianGroup(ASMPLX)

    coerce(s:List(PI)):% == 
      ss := removeDuplicates s
      ss ~= s => error "not a simplex; duplicate labels"
      ss::ASMPLX::Rep
    

    bdry(c:%):% ==
      if size(c) = 1 then
        s:=nthFactor(c,1)
        fs:=facets(s)
        sgn:=(j:INT):INT+->if even? (j-1) then 1 else -1 
        nthCoef(c,1)*reduce("+",[sgn(j)*fs.j::Rep for j in 1..#fs])
      else
        ct:=[(nthCoef(c,j)*nthFactor(c,j))::Rep for j in 1..size(c)]
        reduce("+",map(bdry,ct))
        

)abbrev domain ASCMPLX AbstractSimplicialComplex
++ Author: 
++ Date Created: Sat Oct 18 17:01:49 CEST 2014
++ License: BSD (same as Axiom)
++ Date Last Updated:
++ Basic Operations: 
++ Related Domains: 
++ Also See:
++ AMS Classifications:
++ Keywords: 
++ Examples:
++ References:
++
++ Description: An abstract simplicial complex is just a collection
++ (here a list) of abstract simplices. 
++
AbstractSimplicialComplex() : Exports == Implementation where
  
  NNI ==> NonNegativeInteger
  PI  ==> PositiveInteger
  INT ==> Integer
  
  ASMPLX ==> AbstractSimplex
  
  Exports == Join(CoercibleTo OutputForm, ConvertibleTo String) with
    
    coerce : List List PI -> %
    ++ List of lists of PositiveInteger.
    ++X [[1,2,3],[3,4,1],[4,5]]::ASCMPLX
    
    coerce : List ASMPLX  -> %
    ++ List of abstract simplices.
    ++X [s1,s2,s3]::ASCMPLX, where typeOf(sI) = AbstractSimplex.
        
	
  Implementation ==  List(ASMPLX) add 

    Rep := List(ASMPLX)
    
    coerce(c:List List PI):% == [s::ASMPLX for s in c]
    coerce(c:List ASMPLX):%  == [s for s in c]
   