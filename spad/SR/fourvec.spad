)lisp (setq |$inclAssertions| nil)
)abbrev domain FOURVEC FourVector
++ Author: Kurt Pagani
++ Date Created: Sat Dec 10 20:06:32 CET 2016
++ License: FriCAS/BSD
++ References: https://en.wikipedia.org/wiki/Four-vector
++ Description: In special relativity, a four-vector (also known as a 4-vector)
++   is an object with four components, that transforms in a specific way under 
++   Lorentz transformations (see next domain below: LorentzTransformation). 
++   Four vectors are implemented here as IndexedVector(K,0), where K is the
++   "field" Expression(Integer). The general form is X:=[x0,x1,x2,x3], thar is 
++   each component has type K. Note that indexing starts at "0", so that we
++   have X.0=x0,...,X.3=x3, as it is custom in the literature.
++   Four vectors form a real vector space with a (pseudo-) scalar product:
++           X*Y = X.0 * Y.0 - X.1 * Y.1 - X.2 * Y.2 - X.3 * Y.3.
++   However, on technical reasons this type does not inherit from VectorSpace,
++   but from VectorCategory K (thus all vector operations are available).
++  
FourVector() : Exports == Implementation where
  
  K   ==> Expression Integer
  NNI ==> NonNegativeInteger
  
  Exports == Join(CoercibleTo OutputForm, VectorCategory K) with
    
    coerce  : % -> OutputForm
    coerce  : % -> List K
    convert : List K -> %
    
    fourVector: (K,K,K,K) -> %
    
    _* : (%,%) -> K
    
	
  Implementation ==  IndexedVector(K,0)  add 

    import from List(K)
    
    Qelt1 ==> QAREF1O$Lisp
    Qsetelt1 ==> QSETAREF1O$Lisp

    qelt(x, i) == Qelt1(x, i, 0)
    qsetelt!(x, i, s) == Qsetelt1(x, i, s, 0)
    
    fourVector(t,x,y,z) == construct [t,x,y,z]
    
    (u:% * v:%):K == (u.0*v.0)-(u.1*v.1)-(u.2*v.2)-(u.3*v.3) 

    Zero():% == construct([0,0,0,0]::List K)

    coerce(u:%):List K == [u.0,u.1,u.2,u.3]
    
    convert(l:List K):% == construct l


)abbrev domain LOTRA LorentzTransformation
++ Author: Kurt Pagani
++ Date Created: Sat Dec 10 23:01:44 CET 2016
++ License: FriCAS/BSD
++ References: https://en.wikipedia.org/wiki/Lorentz_transformation
++   https://en.wikipedia.org/wiki/Rotation_matrix
++   http://fricas.github.io/api/TranscendentalManipulations.html
++ Description: The type LorentzTransformation comprises 4x4 matrices
++   from MatrixCategory(K, Row, Col), where K=Expression(Integer). 
++   There are constructors for boosts in any direction as well as space 
++   rotations with ange theta about a given unit vector and some others.
++   Moreover: LorentzTransformation has Group -> true, where "1" is the
++   unit diagonal matrix and "inv" the inverse. The Minkowski matrix is
++   implemented by "eta()". Furthermore: 
++              LorentzMatrix * FourVector = FourVector.
++   There is a simplifier "simp" because the group operations may result
++   in unsimplified expressions. See the ref: TranscendentalManipulations.
++
LorentzTransformation() : Exports == Implementation where
  
  K   ==> Expression Integer
  Row ==> Vector K
  Col ==> Vector K
  
  
  Exports == Join(CoercibleTo OutputForm, MatrixCategory(K, Row, Col),Group) with
    
    eta :  () -> %
      ++ eta() returns the 4x4 Minkowski matrix with signature [+,-,-,-], i.e.
      ++ diagonalMatrix(1,-1,-1,-1).      
    beta : Vector K -> K
      ++ beta([v1,v2,v3]) calculates v/c, where v:=sqrt(v1^2+v2^2+v3^2).
    gamma : Vector K -> K
      ++ gamma([v1,v2,v3]) returns the Lorentz factor 1/sqrt(1-beta(v)^2).
    boost : Vector K -> %
      ++ boost([v1,v2,v3]) 
    rotation : (Vector K,K) -> %
      ++ rotation([v1,v2,v3])
    _* : (%,FourVector) -> FourVector
      ++ Scalar product u*u of two FourVectors, equivalent to dot(u,eta()*u).
    One : () -> %
      ++ One() is the unit element of the group.
    inv : % -> %
      ++ inv(L) computes the (group)inverse element.
    simp: % -> %
      ++ simp(L) simplifies the matrix L by simplifying each entry.
    coerce : % -> Matrix K
      ++ coerce(L) coerce a LorentzTransformation to the matrix type 
      ++ Matrix(Expression Integer).
	
  Implementation == Matrix(K) add 

    Rep :=Matrix(K)
    
    eta() == matrix([[1,0,0,0],[0,-1,0,0],[0,0,-1,0],[0,0,0,-1]])

    beta(v:Vector K):K == sqrt(dot(v,v))/coerce('c)$K
    
    gamma(v:Vector K):K == 1/sqrt(1-beta(v)^2)

    boost(v:Vector K):% ==
      not(#v=3) => error "3-vector expected."
      dot(v,v)=0 => diagonalMatrix [1,1,1,1::K]
      b:K:=beta v
      g:K:=gamma v
      q:K:=1/sqrt(dot(v,v))
      n:Vector K:=q*v
      r1:List K:= [g,-g*b*n.1,-g*b*n.2,-g*b*n.3]
      r2:List K:= [-g*b*n.1,1+(g-1)*n.1^2,(g-1)*n.1*n.2,(g-1)*n.1*n.3]
      r3:List K:= [-g*b*n.2,(g-1)*n.1*n.2,1+(g-1)*n.2^2,(g-1)*n.2*n.3]
      r4:List K:= [-g*b*n.3,(g-1)*n.1*n.3,(g-1)*n.2*n.3,1+(g-1)*n.3^2]
      matrix [r1,r2,r3,r4]

    rotation(w:Vector K, th:K):% ==
      not(#w=3) => error "3-vector expected."
      dot(w,w)=0 => error "Cannot rotate about zero vector"
      th=0 => diagonalMatrix [1,1,1,1::K]
      if not(dot(w,w)=1) then
        w:=1/sqrt(dot(w,w))*w
      C:K:=cos(th)
      S:K:=sin(th)
      r1:List K:= [1,0,0,0]
      r2:List K:= [0,C+w.1^2*(1-C),w.1*w.2*(1-C)-w.3*S,w.1*w.3*(1-C)+w.2*S]
      r3:List K:= [0,w.1*w.2*(1-C)+w.3*S,C+w.2^2*(1-C),w.2*w.3*(1-C)-w.1*S]
      r4:List K:= [0,w.1*w.3*(1-C)-w.2*S,w.2*w.3*(1-C)+w.1*S,C+w.3^2*(1-C)]
      matrix [r1,r2,r3,r1]

 
    (L:%) * (v:FourVector) == 
      convert(entries(L*vector(v::List K)))$FourVector

    coerce(L:%):Matrix K == L::Rep

    One():% == diagonalMatrix([1,1,1,1::K]) 

    inv(L:%):% == 
      IL:Union(Matrix(K),"failed"):=inverse(L::Matrix K)$Matrix(K)
      IL case "failed" ==> error "???"
      coerce(IL)

    simp(L:%):% ==
      map((x:K):K+->simplify(x)$TranscendentalManipulations(Integer,K),L)

)if false
-- example: B1:=boost(vector [b*c,0,0])
--          u:=fourVector(c*t,x,y,z)
--          dot(u,(eta()*u)) = u*u  -> true
--          IB1:=boost(vector [-b*c,0,0]) = inverse B1
-- use simp to simplify:
--          simp ( inverse(B1)- IB1)
--          simp ( B1 * IB1 )
--
-- rotation: R:=rotation([1,0,0],%pi)
-- R*u = [c*t,x,-y,t]


)endif

