)abbrev package TRGSMP TrigSimp
++ Author: Kurt Pagani
++ Date Created: Mon Feb 06 18:56:20 CET 2017
++ License: BSD
++ References:
++ Description:
++
TrigSimp() : Exports == Implementation where
  
  R ==> Integer
  X ==> Expression R
  
  RR ==> RewriteRule(R,R,X)
  RS ==> Ruleset(R,R,X)
  
  PI  ==> PositiveInteger
  NNI ==> NonNegativeInteger
  OUT ==> OutputForm
  
  PFRM ==> Record(pol:X,vl:List Symbol,ker:List X)
  
  Exports ==  with
    
    polynomialForm : (X,Symbol) -> PFRM
    length : X -> NNI
    trigSimp : X -> X
	
	
  Implementation == X add 
    
    r:X:='r::X  -- do not reuse r!
    
    -- TR1, TR2
    tr1:RS := ruleset [rule(sec r,1/cos(r)),rule(csc r,1/sin(r))]
    tr2:RS := ruleset [rule(tan r,sin(r)/cos(r)),rule(cot r,cos(r)/sin(r))] 

    -- TR3 [table 1]
    r11:RR:=rule(sin(-r),-sin(r))
    r12:RR:=rule(cos(-r),cos(r))
    r13:RR:=rule(tan(-r),-tan(r))
    r14:RR:=rule(cot(-r),-cot(r))
    
    r21:RR:=rule(sin(pi()-r),sin(r))
    r22:RR:=rule(cos(pi()-r),-cos(r))
    r23:RR:=rule(tan(pi()-r),-tan(r))
    r24:RR:=rule(cot(pi()-r),-cot(r))    

    r31:RR:=rule(sin(pi()+r),-sin(r))
    r32:RR:=rule(cos(pi()+r),-cos(r))
    r33:RR:=rule(tan(pi()+r),tan(r))
    r34:RR:=rule(cot(pi()+r),cot(r)) 

    r41:RR:=rule(sin(2*pi()-r),-sin(r))
    r42:RR:=rule(cos(2*pi()-r),cos(r))
    r43:RR:=rule(tan(2*pi()-r),-tan(r))
    r44:RR:=rule(cot(2*pi()-r),-cot(r)) 
    
    -- todo: r5m

    tr3:RS := ruleset [r11,r12,r13,r14,r21,r22,r23,r24,r31,r32,r33,r34,_
                       r41,r42,r43,r44]


    -- TR4 [table 2]
    s11:RR:=rule(sin(0),0)
    s12:RR:=rule(sin(pi()/6::X),1/2::X)
    s13:RR:=rule(sin(pi()/4::X),sqrt(2::X)/2::X)
    s14:RR:=rule(sin(pi()/3::X),sqrt(3::X)/2::X)
    s15:RR:=rule(sin(pi()/2::X),1::X)
    
    s21:RR:=rule(cos(0),1)
    s22:RR:=rule(cos(pi()/6::X),sqrt(3::X)/2::X)
    s23:RR:=rule(cos(pi()/4::X),sqrt(2::X)/2::X)
    s24:RR:=rule(cos(pi()/3::X),1::X/2::X)
    s25:RR:=rule(cos(pi()/2::X),0::X)
    
    s31:RR:=rule(tan(0),0)
    s32:RR:=rule(tan(pi()/6::X),sqrt(3::X)/2::X)
    s33:RR:=rule(tan(pi()/4::X),1::X)
    s34:RR:=rule(tan(pi()/3::X),sqrt(3::X))
    --s35:RR:=rule(tan(pi()/2::X),plusInfinity())
    
    tr4:RS := ruleset [s11,s12,s13,s14,s15,s21,s22,s23,s24,s25,_
                       s31,s32,s33,s34]

    -- TR5
    tr5:RR := rule(sin(r)^2,1::X - cos(r)^2)
    
    -- TR6
    tr6:RR := rule(cos(r)^2,1::X - sin(r)^2)
    
    -- TR7
    tr7:RR := rule(cos(r)^2,(1::X + cos(2*r))/2::X)


    polynomialForm(x:X,sym:Symbol):PFRM == 
      tf:List Symbol:=['sin,'cos,'tan,'cot,'sec,'csc]
      k:List Kernel(X):=kernels(x)
      kp:List X:=[s::X for s in k | member?(name s,tf)]
      n:NNI:=#kp
      lv:List X:=[subscript(sym,[j::OUT])::X for j in 1..n]
      xp:X:=x
      for j in 1..n repeat
        xp:=subst(xp,kp.j = lv.j)
      [xp,[subscript(sym,[j::OUT]) for j in 1..n],kp]
      
    length(x:X):NNI ==
      pf:PFRM:=polynomialForm(x,'t)
      pf.vl = [] => 0::NNI
      MVP:=MultivariatePolynomial(pf.vl,X)
      mvpf:MVP:=(pf.pol)::MVP
      mon:List(MVP):=monomials(mvpf)$MVP
      #mon


    trigSimp(x:X):X == tr5 tr4 tr3 tr1(x)
   