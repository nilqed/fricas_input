)abbrev domain IDXOBJ IndexedObject
++ Author: Kurt Pagani
++ Date Created: Sat Dec 19 23:28:32 CET 2015
++ License: BSD (same as Axiom)
++ Date Last Updated:
++ Examples:
++ References:
++ Description: 
++
IndexedObject() : Exports == Implementation where
    
  SYM ==> Symbol
  LS  ==> List Symbol
  NNI ==> NonNegativeInteger
  SEG ==> Segment NNI
  OF  ==> OutputForm
  
  
  Exports == Join(CoercibleTo OutputForm, ConvertibleTo TexFormat) with
    
    --list of exported operations, e.g.
    rmSupMark : SYM -> SYM
      ++ removes the sup prefix (!)
      
    sup? : SYM -> Boolean
      ++ sup?(s) is true if s is an upper index (prefixed by !)
      
    mkIdxObj : (Symbol,List Symbol) -> %
      ++ creates an indexed object
      
    getIndices : % -> List Symbol
      ++ return the indices
      
    getSymbol : % -> Symbol
      ++ return the main symbol
      
    covariantIndices : % -> List Symbol
      ++ return the covariant indices
      
    contravariantIndices : % -> List Symbol
      ++ return the contravariant indices    
      
    contractibleIndices : % -> List Symbol
      ++ return symbols which appear as lower as well as upper indexes
      
    homologic? : (%,%) -> Boolean
      ++ Two IndexedObjects are homologic if they have the same structure
      ++ of indices, whereby contractions do not count. 
      
    cohomologic? : (%,%) -> Boolean
      ++ Two IndexedObjects are cohomologic if they are dual to each other.
      
    conjugate : % -> %
      
    coerce : % -> OutputForm
      ++ coerce to OutputForm
      
    coerce : List SYM -> %
	  ++ coerce to indexed symbol
	  
    convert : % -> TexFormat
	  ++ convert to TeX format.
	  
    tex : % -> List String
      ++ convert to TeX format (without $$)
	
  Implementation ==  add 
  
    --dim1:= #ind  -- rank
    --dim2:= (hi seg) - (lo seg) + 1  -- dim index range 

    Rep := Record(ls: List SYM)
    
    
    sup?(s:Symbol):Boolean ==
      scripted? s => false
      ss:String:=string s
      ss.1 = char "!" and  #ss > 1 => true
      false
        
    rmSupMark(s:Symbol):Symbol ==
      not sup? s => s
      leftTrim(string s, char "!")::Symbol
 

    mkIdxObj(s,ls) == concat(s,ls)::%
    
    getIndices(x) == rest x.ls
    getSymbol(x) == first x.ls
      
    covariantIndices(x) ==
      y:=rest x.ls
      [s for s in y | ~sup?(s)]
      
    contravariantIndices(x) ==
      y:=rest x.ls
      l:=[s for s in y | sup?(s)]
      map(rmSupMark,l)


    contractibleIndices(x) ==
      l:Set(Symbol):=set covariantIndices(x)
      u:Set(Symbol):=set contravariantIndices(x)
      r:Set(Symbol):=intersect(l,u)
      parts(r)
      

    -- helper function (!recursive!)
    duplicates?(l:List Symbol):Boolean ==
      #l < 2 => false
      member?(l.1,rest l) => true
      duplicates?(rest.l)


    -- helper function
    addSupMark(s:Symbol):Symbol ==
      ss:String:=string s
      ss:=concat("!",ss)
      ss::Symbol
      

    homologic?(x,y) ==
      ix:=getIndices x
      iy:=getIndices y
      cx:=contractibleIndices x
      cy:=contractibleIndices y
      for c in cx repeat
        remove!(c,ix)
        remove!(addSupMark(c),ix)
      for d in cy repeat
        remove!(d,iy)
        remove!(addSupMark(d),iy)
      return(ix=iy)


    conjugate(x) ==
      ix:=getIndices x
      cx:List(Symbol):=[]
      for c in ix repeat
        if sup?(c) then
          cx:=concat(cx,rmSupMark(c))
        else
          cx:=concat(cx,addSupMark(c))
      mkIdxObj(getSymbol x, cx)
        

    cohomologic?(x,y) == 
      homologic?(conjugate(x),y)

    coerce(l:List SYM):% ==
      err:="Symbols must be unscripted."
      sym:=first l
      idx:=rest l
      scripted? sym => error err
      for x in idx repeat
        xx:=rmSupMark x
        scripted? xx => error err
        ss:=string xx
        #ss ~= 1 => error "Length one symbols only allowed."
      res:=[l]::Rep
      duplicates? covariantIndices(res) => error "Duplicate lower indexes"
      duplicates? contravariantIndices(res) => error "Duplicate upper indexes"
      res
 
    coerce(x:%):OF ==
      bc:Character:=char(32)
      b:Symbol:=bc::String::Symbol
      l:=x.ls
      sym:=first l
      idx:=rest l
      sub:=[]
      sup:=[]
      for x in idx repeat
        if sup? x then
          sup:=concat(sup, rmSupMark x)
          sub:=concat(sub, b)
        else
          sub:=concat(sub, x)
          sup:=concat(sup, b)
      osup:=hconcat [s::OF for s in sup]
      osub:=hconcat [s::OF for s in sub]
      s:OF:=scripts(sym::OF, [osub,osup])
        
     
    convert(x:%):TexFormat ==
      xo:OF:=x::OF
      coerce(xo)$TexFormat

    tex(x:%):List String ==
      xt:TexFormat:=convert(x)
      tex(xt)$TexFormat
      
    
    -- [T,i,!j,k,!l,!m ]::List Symbol::IDXOBJ  


)abbrev domain DIOBJ DifferentiatedIndexedObject
++ Author: Kurt Pagani
++ Date Created: Sat Dec 19 23:28:32 CET 2015
++ License: BSD (same as Axiom)
++ Date Last Updated:
++ Examples:
++ References:
++ Description: 
++
DifferentiatedIndexedObject() : Exports == Implementation where
    
  SYM ==> Symbol
  LS  ==> List Symbol
  NNI ==> NonNegativeInteger
  SEG ==> Segment NNI
  OF  ==> OutputForm
  IO  ==> IndexedObject
  
  
  Exports == Join(CoercibleTo OutputForm, ConvertibleTo TexFormat) with
  
    D  : (IO, List SYM) -> %
    DC : (IO, List SYM) -> %
    
    convert : % -> TexFormat
	  ++ convert to TeX format.
	  
    tex : % -> List String
      ++ convert to TeX format (without $$)

  Implementation ==  add 
  

    Rep := Record(io:IO, ls: List SYM, cov?: Boolean)
    
    D(x,l)  == [x,l,false]$Rep
    DC(x,l) == [x,l,true]$Rep
    

    
    coerce(d:%):OF ==
      import from IndexedObject
      bc:Character:=char(32)
      b:Symbol:=bc::String::Symbol
      comma:OF:=outputForm(","::SYM)$OF
      covar:OF:=outputForm(";"::SYM)$OF
      sub:List SYM:=[]
      sup:List SYM:=[]
      for s in d.ls repeat
        if sup?(s)$IO then
          sup:=concat(sup, rmSupMark(s)$IO)
          sub:=concat(sub, b)
        else
          sub:=concat(sub, s)
          sup:=concat(sup, b)
      osup:OF:=hconcat [t::OF for t in sup]
      osub:OF:=hconcat [t::OF for t in sub]
      sscr:List OF:=[osub,osup]
      if d.cov? then
        a:OF:=scripts(covar,sscr)
      else
        a:OF:=scripts(comma,sscr)
      hconcat((d.io)::OF,a)


    convert(x:%):TexFormat ==
      xo:OF:=x::OF
      coerce(xo)$TexFormat

    tex(x:%):List String ==
      xt:TexFormat:=convert(x)
      tex(xt)$TexFormat  