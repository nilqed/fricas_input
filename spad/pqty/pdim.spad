)abbrev category PUNIT PhysicalUnit
PhysicalUnit() : Category == with   
    "*"  : (%,%) -> %
    "/"  : (%,%) -> %
    "^"  : (%,Integer) -> %
    "="  : (%,%) -> Boolean
    dim  : % -> List Integer
    one  : %
    coerce : % -> OutputForm


)abbrev domain PUSYS PhysicalUnitSystem 
PhysicalUnitSystem(u:List Symbol) : Exports == Implementation where
    BASU ==> OrderedVariableList(u) 
    FAGB ==> FreeModule(Integer,BASU) 
    Exports == Join(PhysicalUnit,CoercibleTo OutputForm) with
      _* : (%,%) -> %
      _/ : (%,%) -> %
      baseSymbols : List Symbol
      baseUnits : List %
      factors : % ->  List Record(gen: BASU,exp: Integer)
    Implementation == FreeGroup(BASU) add
      Rep:=FreeModule(Integer,BASU)
      sort: % -> %
      x * y == sort(x+y) 
      x / y == sort(x-y)
      x ^ n == sort(n*x) 
      one() == 0$Rep
      baseSymbols() == [convert(x)@Symbol for x in enumerate$BASU]
      baseUnits() == [x::% for x in enumerate$BASU]
      dim(x) ==
        d:=[0@Integer for j in 1..#u]
        lr:List(Record(gen:BASU,exp:Integer)):=factors(x)
        for r in lr repeat
          g:BASU:=r.gen
          k:=position(g,enumerate$BASU)$List(BASU)
          d.k:=r.exp
        d

      x = y == test(dim x = dim y)                                      
      
      coerce0(x:%):OutputForm ==
        #monomials(x) = 0 => outputForm(1)
        d:=dim(x)
        b:=baseSymbols()
        y:List OutputForm:=[]
        for j in 1..#d repeat
          if d.j=1 then y:=concat(y,outputForm(b.j))
          else
            if d.j~=0 then y:=concat(y,outputForm(b.j)^outputForm(d.j))
        blankSeparate y 

      sort(x:%):% ==
        R==>Record(gen: BASU,exp: Integer)
        f:=(a:R,b:R):Boolean+->(test(a.gen>b.gen))
        sort(f,factors x) pretend Rep 


-- SI:=PUSYS(['m,'kg,'s])
-- u:=baseUnits()$SI
-- coerce0 works as coerce, if sort then not necess.

)abbrev domain PQTY PhysQty
PhysQty(U): Exports == Implementation where
    
    Q   ==> Fraction(Integer)
    F   ==> Float
    R   ==> DoubleFloat
    I   ==> Integer
    OF  ==> OutputForm
    PI  ==> PositiveInteger
    IVF ==> Interval Float
    U:PhysicalUnit
       
    
    Exports == Join(CoercibleTo OutputForm) with
      _* : (%,%) -> %
      _/ : (%,%) -> %
      _+ : (%,%) -> %
      _- : (%,%) -> %
      _^ : (%,Integer) -> %
      _- : % -> %
      
      ival : % -> IVF
      unit : % -> U    
          
      elt : (IVF,U) -> %
      elt : (F,U) -> %
      
      setOutputMode : PI -> PI
      coerce : % -> OutputForm
    
    Implementation ==  add 
    
      Rep := Record(ival:IVF, unit:U)
      
      outputMode:PI:=1
      
      x * y == [x.ival * y.ival, x.unit * y.unit]$Rep
      x / y ==
        r:Union(IVF,"failed"):=recip(y.ival)
        r case IVF => [x.ival * r, x.unit / y.unit]$Rep
        error "failed"
      x + y == 
        x.unit=y.unit => [x.ival + y.ival, x.unit]$Rep
        error "failed"
      x - y == 
        x.unit=y.unit => [x.ival - y.ival, x.unit]$Rep
        error "failed"
      x ^ n == 
        n > 0 => [x.ival^n::PI, x.unit^n::PI]$Rep
        n = 0 => [interval(1.0,1.0)$IVF, one()]$Rep
        r:Union(IVF,"failed"):=recip(x.ival)
        m:PI:=(-n)::PI
        r case IVF => [r^m, x.unit^n]$Rep
        error "failed"
                      
      - x   == [-x.ival, x.unit]$Rep 


      ival x == x.ival
      unit x == x.unit

      elt(v:IVF,u:U):% == [v,u]$Rep
      elt(v:F,u:U):%   == [interval(v)$IVF,u]$Rep
      
      setOutputMode(s:PI):PI ==
        modes:List PI:= [1,2,3]
        if member?(s,modes) then 
            outputMode := s
            return s
        error "1: plusMinus, 2: single, 3: interval"
      
      coerce(x) ==
        pm:Character:=char(177)
        pmof:=pm::String::Symbol::OF
        val:Float:=(sup(x.ival)+inf(x.ival))/2
        err:Float:=sup(x.ival)-val
        outputMode=1 => blankSeparate [val::OF,pmof,err::OF,x.unit::OF]
        outputMode=2 => blankSeparate [val::OF,x.unit::OF]
        outputMode=3 => blankSeparate [x.ival::OF,x.unit::OF]


                                                                    
)abbrev package SI SIunits                                                
SIunits : Exports == Implementation where
  
    USY ==> ['m,'kg,'s,'A,'K,'mol,'cd]                                  
    SIU ==> PhysicalUnitSystem(USY)     
                                                  
    Exports == with
  
      %m   : Integer -> SIU
      %kg  : Integer -> SIU        
      %s   : Integer -> SIU
      %A   : Integer -> SIU
      %K   : Integer -> SIU
      %mol : Integer -> SIU
      %cd  : Integer -> SIU                       

      hertz     : SIU
      newton    : SIU
      pascal    : SIU  
      joule     : SIU 
      watt      : SIU 
      coulomb   : SIU
      volt      : SIU
      farad     : SIU
      ohm       : SIU
      siemens   : SIU
      weber     : SIU
      tesla     : SIU
      henry     : SIU
      lumen     : SIU
      lux       : SIU
      becquerel : SIU
      gray      : SIU
      sievert   : SIU
      katal     : SIU

    Implementation ==  SIU add                 
  
      u:=baseUnits()$SIU
    
      %m(n)   == u.1^n
      %kg(n)  == u.2^n
      %s(n)   == u.3^n
      %A(n)   == u.4^n
      %K(n)   == u.5^n
      %mol(n) == u.6^n
      %cd(n)  == u.7^n
                                     
      hertz      ==  %s(-1)
      newton     ==  %kg(1)*%m(1)*%s(-2)
      pascal     ==  %kg(1)*%m(-1)*%s(-2)   
      joule      ==  %kg(1)*%m(2)*%s(-2)
      watt       ==  %kg(1)*%m(2)*%s(-3)
      coulomb    ==  %s(1)*%A(1)
      volt       ==  %kg(1)*%m(2)*%s(-3)*%A(-1)
      farad      ==  %kg(-1)*%m(-2)*%s(4)*%A(2)
      ohm        ==  %kg(1)*%m(2)*%s(-3)*%A(2)
      siemens    ==  %kg(-1)*%m(-2)*%s(3)*%A(2)
      weber      ==  %kg(1)*%m(2)*%s(-2)*%A(-1)
      tesla      ==  %kg(1)*%s(-2)*%A(-1)
      henry      ==  %kg(1)*%m(2)*%s(-2)*%A(-2)
      lumen      ==  %cd(1)
      lux        ==  %m(-2)*%cd(1)
      becquerel  ==  %s(-1)
      gray       ==  %m(2)*%s(-2)
      sievert    ==  %m(2)*%s(-2)
      katal      ==  %s(-1)*%mol(1)    

