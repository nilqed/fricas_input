-- Alasdair's code
powerSet(S:Set Any):Set Set Any==
++ This produces the power set (set of all subsets) of a given set, using a simple
++ recursive algorithm.
  card:=cardinality(S)
  if card=1 then
     return(set [set[],S])
  else
     x:=members(S).card
     S1:=remove(x,S)
     S1P:=powerSet(S1)
     S1Px:Set Set Any:=set [union(set[x],s) for s in members(S1P)]
     return(union(S1P,S1Px))

choose(S:Set ANY, n:NNI):Set Set Any==
++ choose(S,n) produces all subsets of S with cardinality n.  Again, a simple
++ recursive algorithm is used
  card:=cardinality(S)
  if n=0 then
    return(set[set[]])
  if card=n then
    return(set[S])
  else
    x:=members(S).1
    S1:=remove(x,S)
    S1P:=choose(S1,n-1)
    S1Px:Set Set Any:=set [union(set[x],s) for s in members(S1P)]
    return(union(choose(S1,n),S1Px))

fixed?(L1:List Any,L2:List Any):Boolean==
++ This is a helper program for computing derangements.  It returns true if the
++ input lists have at least one element in the same place in each list. 
  if #L1~=#L2 then
    error("Lists must be of the same length")
  else
    return(reduce(\/, [(L1.i=L2.i)@Boolean for i in 1..#L1]))

nextperm(L:List INT,n:INT):List INT==
++ The driver of Algorithm L: given any permutation, produces the next one
++ in lexicographical order.  This algorithm is implemented in "lexperm" below
  a:=L
  for i in 1..n-1 repeat if a.i<a.(i+1) then k:=i
  for i in k+1..n repeat if a.k<a.i then j:=i
  temp:=a.k
  a.k:=a.j
  a.j:=temp
  next:List INT:=concat([a.i for i in 1..k],reverse([a.i for i in k+1..n]))
  return(next)

lexperm(n:INT):List List INT==
++ This is an implementation of Knuth's "Algorithm L" for listing permutations of
++ [1..n] in lexicographical order.  
  a:List INT:=[k for k in 1..n]
  P:List List INT:=[]
  repeat
    ++print(a)
    P:=append(P,[copy(a)])
    if #[k for k in 1..n-1 | a.k<a.(k+1)]=0 then
      return(P)
    else
      a:=nextperm(a,n)

lexperm2(L:List INT):List List INT==
++ A variation of lexperm which applies the Algorithm L to any list of integers
++ It works well for lists which include repeated elements
  a:=L
  n:=#L
  P:List List INT:=[]
  repeat
    ++print(a)
    P:=append(P,[copy(a)])
    if #[k for k in 1..n-1 | a.k<a.(k+1)]=0 then
      return(P)
    else
      a:=nextperm(a,n)

derangements(n:INT):INT==
++ returns the number of derangements D(n) of n objects, using the recursion 
++ D(1)=0,D(2)=1,D(n)=(n-1)*(D(n-1)+D(n-2))
  if n<3 then
    return(n-1)
  else
    a:=0
    b:=1
    for i in 3..n repeat
      c:=(i-1)*(b+a)
      a:=b
      b:=c
    return(c)

listPermutations(L:List Any):List List Any==
++ Another variant of lexperm, this time for any list
  E:=removeDuplicates(L)
  EN:=sort([position(x,E) for x in L])
  P:=lexperm2(EN)
  Q:List List Any:=[[E.i for i in p] for p in P]
  return(Q)

randomPermutation(L:List Any):List Any==
++ This is an implementation of the Knuth Shuffle
  M:=copy(L)
  n:=#L
  for k in 1..n-1 repeat
    p:=random(n)+1
    temp:=M.p
    M.p:=M.k
    M.k:=temp
  return(M)

listDerangements(L:List Any):List List Any==
++ List all the derangements (permutations with no fixed points) by the simple method
++ of first listing all permutations, and keeping only those with no fixed points.
  P:=listPermutations(L)
  Ds:List List Any:=[]
  for X in P repeat
    if ~fixed?(L,X) then
       Ds:=append(Ds,[X])
  return(Ds)

countDerangements(L:List Any):INT==
++ Returns the number of derangements of a list possibly with repeated
++ elements, using McMahon's method of generating functions
  E:=removeDuplicates(L)
  a:=[count(x,L) for x in E]
  if reduce(max,a)=1 then
    return(derangements(#a))
  else
    vs:=[subscript('x::Symbol,[i])@Symbol for i in 1..#a]
    S:=reduce(+,vs)
    P:DMP(vs,FRAC INT):=reduce(*,[(S-vs.i)^a.i for i in 1..#a])
    c:=coefficient(P,vs.1,a.1)
    for i in 2..#a repeat
      c:=coefficient(c,vs.i,a.i)
    return(c)

randomDerangement(L:List Any):List Any==
++ Produces a random derangment by choosing permutations at random until one of them 
++ is a derangement.  This is not in fact guaranteed to work, but the probability of
++ it failing is negligible.  This should be replaced with a better program.
  if countDerangements(L)=0 then
    error("The list has zero derangements")
  else
    repeat
      X:=randomPermutation(L)
      if ~fixed?(X,L) then
        return(X)

++ Now the same programs as above but reworked for strings
    
listStringPermutations(S:String):List String==
  E:=removeDuplicates(S)
  L:=sort([position(x,parts(E)) for x in parts(S)])
  P:=lexperm2(L)
  Q:List String:=[reduce(concat,[(E.x)::String for x in p]) for p in P]
  return(Q)

stringFixed?(S1:String,S2:String):Boolean==
  if (#S1~=#S2) then
     error("Strings must have the same length")
  else
     return(reduce(\/, [(S1.i=S2.i)@Boolean for i in 1..#S1]))

listStringDerangements(S:String):List String==
  P:=listStringPermutations(S)
  Ds:List String:=[]
  for X in P repeat
    if ~stringFixed?(S,X) then
       Ds:=append(Ds,[X])
  return(Ds)

randomStringPermutation(S:String):String==
  L:List String:=parts(S)
  P:=randomPermutation(L)
  return(reduce(concat,P))

randomStringDerangement(S:String):String==
  E:=removeDuplicates(S)
  a:=[count(x,S) for x in parts(E)]
  if reduce(\/,[(2*z>#S)@Boolean for z in a]) then
    error("The string has zero derangements")
  else
    repeat
      X:=randomStringPermutation(S)
      if ~stringFixed?(X,S) then
        return(X)

listPartitions(n:INT):List List INT==
++ This list all the set partitions in terms of "codes": for a set S with n elements
++ a partition code C is a list of n numbers 1,2,..,k with k<=n, such that the i-th
++ element of S belongs to subset C.i.  For example, if S={2,4,6,8,10} and
++ C=[1,2,1,3,1] then the corresponding subset partition is {{2,6,10},{4},{8}}
  p:List List INT:=[[1]]
  if n=1 then
    return(p)
  else
    for i in 2..n repeat
      q:List List INT:=[]
      for x in p repeat
        c:=reduce(max,x)+1
        np:=[append(x,[j]) for j in 1..c]
        q:=concat(q,np)
      p:=copy(q)
    return(p)

listSizePartitions(n:INT,k:INT):List List INT==
++ This lists the codes of all the set partitions whose maximum value is k.  These codes
++ correspond to partitions of exactly k subsets.
  p:List List INT:=[[1]]
  if n=1 then
    return(p)
  else
    for i in 2..n repeat
      q:List List INT:=[]
      for x in p repeat
        c:=reduce(max,x)+1
        np:=[append(x,[j]) for j in 1..min(k,c)]
        q:=concat(q,np)
      p:=copy(q)
    for x in p repeat
      if reduce(max,x)<k then p:=remove(x,p)
    return(p)

setPartitions(S:Set Any):Set Set Any==
++ For a given set S, this returns the subset list generated from the codes produced
++ by the listPartitions function
  n:=#S
  P:List List INT:=listPartitions(n)
  Q:Set Set Any:=set[]
  for x in P repeat
    R:List Set Any:=[set[] for i in 1..reduce(max,x)]
    for i in 1..n repeat R.(x.i):=union(R.(x.i),set[parts(S).i])
    Q:=union(Q,set R)
  return(Q)

setSizePartitions(S:Set Any,k:INT):Set Set Any==
++ For a given set S, this returns all partitions of S into exactly k disjoint subsets
  n:=#S
  P:List List INT:=listSizePartitions(n,k)
  Q:Set Set Any:=set[]
  for x in P repeat
    R:List Set Any:=[set[] for i in 1..k]
    for i in 1..n repeat R.(x.i):=union(R.(x.i),set[parts(S).i])
    Q:=union(Q,set R)
  return(Q)

bell(n:NNI):PI==
++ The Bell numbers B(n): the number of ways a set of n elements can be partitioned
++ into disjoint subsets.  Bell numbers are in fact sums of Stirling numbers of the
++ second kind so that we could simply define
++ bell(n)==reduce(+,[stirling2(n,k) for k in 0..n])
  if n<2 then
    return(1)
  else
    B:=[1,1]
    for i in 2..n repeat
      N:=reduce(+,[binomial(i-1,k)*B.(k+1) for k in 0..i-1])
      B:=append(B,[N])
    return(B.last)

touchard(n:PI,z:Symbol):POLY FRAC INT==
++ The Touchard polynomials T(n,x) are generating functions for Stirling numbers of the
++ second kind: the coefficient of x^k in T(n,x) is the value stirling2(n,k)
  if n=0 then
    return(1)
  else
    Tc:POLY FRAC INT:=1
    for i in 1..n repeat
      Tc:=z*(Tc+D(Tc,z))
    return(Tc)