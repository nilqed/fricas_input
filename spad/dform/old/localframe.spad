)abbrev package HODGE HodgeStar
++ Author: Kurt Pagani
++ Date Created: Sat Jan 02 19:52:00 CET 2016
++ License: BSD
++ References:
++ Description: Differential form methods
++ Requires DeRhamComplex (+)
++ HodgeStar --> e.g. http://math.uh.edu/~minru/Riemann08/hodgetheory.pdf 
++
HodgeStar(R,v) : Exports == Implementation where
    
  R: Join(Ring,Comparable)
  v: List Symbol

  X   ==> Expression R
  OF  ==> OutputForm
  DRC ==> DeRhamComplex(R,v)
  CHC ==> ChainComplex(R,#v)
  BOP ==> BasicOperator
  NNI ==> NonNegativeInteger
  SMR ==> SquareMatrix(#v,X)
  EAB ==> ExtAlgBasis
  REA ==> Record(k : EAB, c : X)
  
  
  Exports ==  with
    
    _* : (List X, List DRC) -> DRC
    _* : (List DRC, List DRC) -> DRC
    d : DRC -> DRC
    one :  -> DRC
    zero : -> DRC
    baseForms : () -> List DRC
    coordVector : () -> List X
    coordSymbols : () -> List Symbol
    vectorField : Symbol -> List X
    scalarField : Symbol -> X
    covectorField : Symbol -> List DRC
    nullForm : Symbol -> DRC


    hodgeStar : (SMR,DRC) -> DRC
      ++ computes the Hodge dual of the differential form % with respect
      ++ to a metric g.
        
    dot : (SMR,DRC,DRC) -> X
      ++ computes the inner product of two differential forms w.r.t. g
        
    proj : (DRC,NNI) -> DRC
      ++ projection to homogeneous terms of degree p
   
    interiorProduct : (SMR, Vector(X),DRC) -> DRC
      ++ Calculates the interior product i_X(a) of the vector field X
      ++ with the differential form a (w.r.t. metric g).
        
    lieDerivative : (SMR, Vector(X),DRC) -> DRC
      ++ Calculates the Lie derivative L_X(a) of the differential 
      ++ form a with respect to the vector field X (w.r.t. metric g).


    pullBack : (List(X)->List(X),List Symbol, DRC) -> DRC
      ++ Pullback of a differential form by f:dom -> v
    

	
  Implementation ==  add 
    
    n:NNI:=#v
    d(f) == exteriorDifferential(f)
    one () == 1@DRC
    zero() == 0@DRC
    baseForms() == [generator(j)$DRC for j in 1..n]
    coordVector() == [s::X for s in v]
    coordSymbols() == v
    
    vectorField(s:Symbol):List X ==
      ls:=[subscript(s,[j::OF]) for j in 1..n]
      op:=[operator t for t in ls]
      x:=[a::X for a in v]
      [f x for f in op]
    
    scalarField(s:Symbol):X ==
      f:=operator s
      f [a::X for a in v]


    covectorField(s:Symbol):List DRC ==
      vf:=vectorField(s)
      [a*1@DRC for a in vf]

    nullForm(s:Symbol):DRC == scalarField(s)*1@DRC


    (l:List(X) * x:List DRC):DRC == 
      l:List DRC:=[l.j * x.j for j in 1..n]
      reduce(_+,l)

    (x:List DRC * y:List DRC):DRC == 
      l:List DRC:=[x.j * y.j for j in 1..n]
      reduce(_+,l)


    -- error messages
    err1:="CoefRing has not IntegralDomain"
    err2:="Metric tensor is not symmetric"
    err3:="Degenerate metric"
    err4:="Index out of range" 
    err5:="Not implemented"


    -- flip 0->1, 1->0 
    flip(b:EAB):EAB ==
      bl := convert(b)$EAB
      [(i+1) rem 2 for i in bl]::EAB


    -- list the positions of a's (a=0,1) in x
    pos(x:EAB, a:Integer):List(Integer) ==
      y:List(Integer):= convert(x)$EAB 
      [j for j in 1..#y | y.j=a]


    -- compute dot of singletons, diagonal g
    dot1(g:SMR,r:REA, s:REA):X ==
      not R has IntegralDomain => error(err1)
      test(r.k ~= s.k) => 0::X
      idx := pos(r.k,1)
      idx = [] => r.c * s.c
      reduce("*",[1/g(j,j) for j in idx]::List(X)) * r.c * s.c


    -- compute dot of singleton terms, general symmetric g
    dot2(g:SMR,r:REA, s:REA):X ==
      not R has IntegralDomain => error(err1)
      pr := pos(r.k,1) -- list positions of 1 in r
      ps := pos(s.k,1) -- list positions of 1 in s
      test(#pr ~= #ps) => 0::X  -- not same degree => 0
      pr = []  => r.c * s.c -- empty pr,ps => product of coefs
      G := inverse(g)::SMR -- compute the inverse of the metric g
      test(#pr = 1) => G(pr.1,ps.1)::X * r.c * s.c -- only one element
      M:Matrix(X) -- the minor
      M := matrix([[G(pr.i,ps.j)::X for j in 1..#ps] for i in 1..#pr])
      determinant(M)::X * r.c * s.c

        
  
    -- export
    dot(g,x,y) ==
      not symmetric? g => error(err2)
      tx:List REA := x::List(REA)
      ty:List REA := y::List(REA)
      tx = [] or ty = [] => 0::X
      if diagonal? g then -- better performance 
        reduce("+",[dot2(g,tx.j,ty.j) for j in 1..#tx])
      else
        reduce("+",[dot1(g,tx.j,ty.j) for j in 1..#tx])

     
    -- export
    hodgeStar(g,x) ==
      not R has IntegralDomain => error(err1)
      not diagonal? g => error(err5)
      w := sqrt(abs(determinant(g))) -- volume factor
      w = 0 => error(err3)
      t:List(REA) := x::List(REA)
      s := [copy(r) for r in t] -- we need a copy of x!
      for j in 1..#t repeat
        s.j.k := flip(s.j.k)
        fs:= convert([s.j])$DRC
        ft:= convert([t.j])$DRC
        s.j.c := s.j.c * w * dot1(g,t.j,t.j)/leadingCoefficient(ft*fs)
      convert(s)$DRC


    -- export
    proj(x,p) ==
      p < 0 or p > #v => error(err4)
      t:List REA := x::List REA
      idx := [j for j in 1..#t | #pos(t.j.k,1)=p]
      s := [copy(t.j) for j in idx::List(NNI)]
      convert(s)$DRC
      
      
    interiorProduct(g:SMR,w:Vector X,x:DRC):DRC ==
      not R has IntegralDomain => error(err1)
      f := reduce("+", [generator(i)$DRC for i in 1..#v]::List(DRC))
      t:List REA := f::List REA
      for j in 1..#v repeat 
        t.(#v-j+1).c := g(j,j)*w(j)  -- reverse order!
      f -- term manipulations are destructive ;)
      dg:X := determinant(g)
      sg:X := dg/abs(dg)
      if odd?(#v) then
        m:X := sg
      else
        m:X := (-1)^degree(x) * sg
      m * hodgeStar(g,f * hodgeStar(g,x))
        
        
    lieDerivative(g,w,x) ==
      a := exteriorDifferential(interiorProduct(g,w,x))
      b := interiorProduct(g,w, exteriorDifferential(x))
      a+b
  
    --
)if todo
    pullBack(f,dom,x) ==
      rdom:List X:=[r::X for r in dom]
      val:List(X):=f(rdom)
      #val ~= #v => error "Incompatible range"
      t:List REA := x::List REA
      s := [copy(r) for r in t] -- we need a copy of x!
      cv:List X:=coordVector()
      el:List Equation(X)=[cv.j=val.j for j in 1..#cv]
      N:=DeRhamComplex(R,dom)
      --subst : (%,List(Equation(%))) -> %
      x
)endif      
