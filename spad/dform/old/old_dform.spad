)abbrev package DFORM DifferentialForms
++ Author: Kurt Pagani
++ Date Created: Sat Jan 02 19:52:00 CET 2016
++ License: BSD
++ References:
++ Description: Differential form methods
++ Requires DeRhamComplex (+)
++ Revision: 
++ modified interiorProduct, lieDerivative (independent of metric)
++
DifferentialForms(R,v) : Exports == Implementation where
    
  R: Join(Ring,Comparable) -- IntegralDomain instead of Ring?
  v: List Symbol

  X   ==> Expression R
  OF  ==> OutputForm
  DRC ==> DeRhamComplex(R,v)
  CHC ==> ChainComplex(R,#v)
  BOP ==> BasicOperator
  NNI ==> NonNegativeInteger
  SMR ==> SquareMatrix(#v,X)
  EAB ==> ExtAlgBasis
  REA ==> Record(k : EAB, c : X)
  SGCF ==> SymmetricGroupCombinatoricFunctions
  
  Exports ==  with
    
    _* : (List X, List DRC) -> DRC
    _* : (List DRC, List DRC) -> DRC
    d : DRC -> DRC
    one :  -> DRC
    zero : -> DRC
    baseForms : () -> List DRC
    coordVector : () -> List X
    coordSymbols : () -> List Symbol
    vectorField : Symbol -> List X
    scalarField : Symbol -> X
    covectorField : Symbol -> List DRC
    nullForm : Symbol -> DRC
    volumeForm : SMR -> DRC
 
    conjBasisTerm : DRC -> DRC
      ++ Return the complement of a basis term w.r.t. volumeForm
 
    atomizeBasisTerm : DRC -> List DRC 
      ++ Given a basis term, e.g. dx*dy*du, atomizeBasisTerm  returns
      ++ a list of the generators (atoms), i.e. [dx,dy,du] for our example.

    monomials : NNI -> List DRC
      ++ List of all monomials of degree p (p in 1..n).
      ++ This is a basis for Lambda(n,p).

    hodgeStar : (SMR,DRC) -> DRC
      ++ computes the Hodge dual of the differential form % with respect
      ++ to a metric g.
        
    dot : (SMR,DRC,DRC) -> X
      ++ computes the inner product of two differential forms w.r.t. g
        
    proj : (NNI,DRC) -> DRC
      ++ projection to homogeneous terms of degree p
   
    interiorProduct : (Vector(X),DRC) -> DRC
      ++ Calculates the interior product i_X(a) of the vector field X
      ++ with the differential form a.
        
    lieDerivative : (Vector(X),DRC) -> DRC
      ++ Calculates the Lie derivative L_X(a) of the differential 
      ++ form a with respect to the vector field X.

    hodgeStar2 :(SMR,DRC) -> DRC
   

  Implementation ==  add 
    
    n:NNI:=#v
    d(f) == exteriorDifferential(f)
    one () == 1@DRC
    zero() == 0@DRC
    baseForms() == [generator(j)$DRC for j in 1..n]
    coordVector() == [s::X for s in v]
    coordSymbols() == v
    
    vectorField(s:Symbol):List X ==
      ls:=[subscript(s,[j::OF]) for j in 1..n]
      op:=[operator t for t in ls]
      x:=[a::X for a in v]
      [f x for f in op]
    
    scalarField(s:Symbol):X ==
      f:=operator s
      f [a::X for a in v]


    covectorField(s:Symbol):List DRC ==
      vf:=vectorField(s)
      [a*1@DRC for a in vf]

    nullForm(s:Symbol):DRC == scalarField(s)*1@DRC


    (l:List(X) * x:List DRC):DRC == 
      l:List DRC:=[l.j * x.j for j in 1..n]
      reduce(_+,l)

    (x:List DRC * y:List DRC):DRC == 
      l:List DRC:=[x.j * y.j for j in 1..n]
      reduce(_+,l)


    -- error messages
    err1:="CoefRing has not IntegralDomain"
    err2:="Metric tensor is not symmetric"
    err3:="Degenerate metric"
    err4:="Index out of range" 
    err5:="Not implemented"
    err6:="Basis term expected"
    err7:="Zero is not a basis term"


    volumeForm(g:SMR):DRC == 
      not R has IntegralDomain => error(err1)
      sqrt(abs(determinant(g)))*reduce(_*,baseForms())


    monomials(p:NNI):List DRC ==
      bf:=baseForms()
      p=0 => [1$DRC]
      p=1 => bf
      np:=[reverse subSet(n,p,i)$SGCF for i in 0..binomial(n,p)-1]
      [reduce(_*,[bf.(1+s.j) for j in 1..p]) for s in np]


    -- flip 0->1, 1->0 
    flip(b:EAB):EAB ==
      bl := convert(b)$EAB
      [(i+1) rem 2 for i in bl]::EAB


    -- list the positions of a's (a=0,1) in x
    pos(x:EAB, a:Integer):List(Integer) ==
      y:List(Integer):= convert(x)$EAB 
      [j for j in 1..#y | y.j=a]


    -- compute dot of singletons, diagonal g
    dot1(g:SMR,r:REA, s:REA):X ==
      not R has IntegralDomain => error(err1)
      test(r.k ~= s.k) => 0::X
      idx := pos(r.k,1)
      idx = [] => r.c * s.c
      reduce("*",[1/g(j,j) for j in idx]::List(X)) * r.c * s.c


    -- compute dot of singleton terms, general symmetric g
    dot2(g:SMR,r:REA, s:REA):X ==
      not R has IntegralDomain => error(err1)
      pr := pos(r.k,1) -- list positions of 1 in r
      ps := pos(s.k,1) -- list positions of 1 in s
      test(#pr ~= #ps) => 0::X  -- not same degree => 0
      pr = []  => r.c * s.c -- empty pr,ps => product of coefs
      G := inverse(g)::SMR -- compute the inverse of the metric g
      test(#pr = 1) => G(pr.1,ps.1)::X * r.c * s.c -- only one element
      M:Matrix(X) -- the minor
      M := matrix([[G(pr.i,ps.j)::X for j in 1..#ps] for i in 1..#pr])
      determinant(M)::X * r.c * s.c

        
  
    -- export
    dot(g,x,y) ==
      not symmetric? g => error(err2)
      tx:List REA := x::List(REA)
      ty:List REA := y::List(REA)
      tx = [] or ty = [] => 0::X
      if diagonal? g then -- better performance 
        reduce("+",[dot1(g,tx.j,ty.j) for j in 1..#tx])
      else
        reduce("+",[dot2(g,tx.j,ty.j) for j in 1..#tx])

      

    -- export
    hodgeStar2(g,x) ==
      not R has IntegralDomain => error(err1)
      not diagonal? g => error(err5)
      w := sqrt(abs(determinant(g))) -- volume factor
      w = 0 => error(err3)
      t:List(REA) := x::List(REA)
      s := [copy(r) for r in t] -- we need a copy of x!
      for j in 1..#t repeat
        s.j.k := flip(s.j.k)
        fs:= convert([s.j])$DRC
        ft:= convert([t.j])$DRC
        s.j.c := s.j.c * w * dot1(g,t.j,t.j)/leadingCoefficient(ft*fs)
      convert(reverse s)$DRC


    -- export
    --proj0(x,p) ==
    --  p < 0 or p > #v => error(err4)
    --  t:List REA := x::List REA
    --  idx := [j for j in 1..#t | #pos(t.j.k,1)=p]
    --  s := [copy(t.j) for j in idx::List(NNI)]
    --  convert(s)$DRC


    proj(p,x) ==
      x=0 => x
      homogeneous? x and degree(x)=p => x
      a:=leadingBasisTerm(x)
      if degree(a)=p then
        leadingCoefficient(x)*a + proj(p, reductum x)
      else
        proj(p, reductum x)
 

    conjBasisTerm(x:DRC):DRC ==
      x=0$DRC => error(err7)
      x ~= leadingBasisTerm(x) => error(err6)
      t:EAB:=(x::List REA).1.k
      l:List(Integer):=exponents(t)
      m:List(DRC):=[generator(i)$DRC for i in 1..#l | l.i=0]
      m=[] => 1$DRC
      reduce(_*,m)
      
  
    atomizeBasisTerm(x:DRC):List(DRC) ==
      x=0$DRC => error(err7)
      x ~= leadingBasisTerm(x) => error(err6)
      t:EAB:=(x::List REA).1.k
      l:List(Integer):=exponents(t)
      [generator(i)$DRC for i in 1..#l | l.i=1] 


    intProdBasisTerm(w:Vector X, x:DRC):DRC ==
      x ~= leadingBasisTerm(x) => error(err6)
      degree(x)=0 => 0$DRC
      degree(x)=1 => w.position(x,baseForms()) * 1$DRC
      a:List(DRC):=atomizeBasisTerm(x)
      b:DRC:=reduce(_*,rest a)
      -- i_w is an antiderivative => 
      intProdBasisTerm(w,a.1)*b - a.1 * intProdBasisTerm(w,b)
      
        
    interiorProduct(w:Vector X, x:DRC):DRC ==
      x=0$DRC => x
      leadingCoefficient(x)*intProdBasisTerm(w,leadingBasisTerm(x)) + _
        interiorProduct(w, reductum(x))
           
    lieDerivative(w:Vector X,x:DRC):DRC ==
      a := exteriorDifferential(interiorProduct(w,x))
      b := interiorProduct(w, exteriorDifferential(x))
      a+b


--
    --eps0(x:DRC):Integer ==
    --  eta:DRC:=reduce("*",[generator(j)$DRC for j in 1..n])
    --  if opposite?(x*conjBasisTerm(x),eta)$DRC then
    --    return(-1)
    --  else
    --    return 1

    eps(x:DRC):X == leadingCoefficient(x*conjBasisTerm(x))

    hodgeStarBT(g:SMR,x:DRC):DRC ==
      not R has IntegralDomain => error(err1)
      q:=sqrt(abs(determinant(g)))
      p:=degree(x)
      J:=monomials(p)
      s:=[eps(y)*dot(g,y,x)*conjBasisTerm(y) for y in J]
      q*reduce(_+,s)
      
      
    hodgeStar(g:SMR,x:DRC):DRC ==
      x=0$DRC => x
      leadingCoefficient(x)*hodgeStarBT(g,leadingBasisTerm(x)) + _
        hodgeStar(g, reductum(x))
                 