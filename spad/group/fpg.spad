)abbrev domain FPG FinitelyPresentedGroup
++ Author: Kurt Pagani
++ Date Created: Mon Nov 07 05:18:24 CET 2016
++ License: BSD
++ References:
++ Description:
++ https://en.wikipedia.org/wiki/Presentation_of_a_group
FinitelyPresentedGroup(L,R) : Exports == Implementation where
   
  LS      ==> List Symbol
  OVAR    ==> OrderedVariableList 
  FG(S)   ==> FreeGroup OVAR S
  LEQ(G)  ==> List Equation G
  
  L: LS
  R: LEQ FG(L)
  
  Exports == Join(Group, CoercibleTo OutputForm) with
    
    1 : () -> %
    generators : () -> List %
    relations : () -> LEQ %
    fpGroup : LEQ % -> Type
    rewriteFake : % -> %
    free? : () -> Boolean
    
    size : % -> NonNegativeInteger
    factors : % -> List(Record(gen: OVAR L,exp: Integer))
    
    coerce : % -> OutputForm
	
	
  Implementation == FG(L) add 
  
    Rep := FG(L)

    1 == 1$Rep
    
    
    generators():List % == [coerce(g)::Rep for g in enumerate()$OVAR(L)]
    relations():LEQ % == R pretend LEQ(%)
    fpGroup(r) == FinitelyPresentedGroup(L,r pretend LEQ(Rep)) 
    
    rewriteFake(g:%):% ==
      sg:=g
      for x in R repeat
        g:=g/lhs(x)*rhs(x)
      g
    
    free?() == empty? R
      
    

-- G:=FPG([a,b,c],[])
-- g:=generators()$G
--
-- 
-- X==>FGG [r,s,t]
-- freeGroup()$X
-- g:=generators()$X
-- fpGroup [g.1=g.2,g.2*g.3=1$X]

-- FG:=FPG([a,b,c],[])
-- fg:=generators()$FG
-- G:=fpGroup([fg.1=fg.3])$FG
)if f
F:=FPG([x,y,z],[])
F has Group
[x,y,z]:=generators()$F

-- Heisenberg group
HG:=fpGroup([z=x*y*inv(x)*inv(y),x*z=z*x,y*z=z*y])$F
HG has Group  
[x,y,z]:=generators()$HG
)endif
