)set break resume
)expose UnittestCount UnittestAux Unittest
)expose DirichletRing

testsuite "Dirichlet"
testcase "coercion"

testEquals("(m: DIRRING INT := (n: PI): INT +-> moebiusMu n;" _
           " [m.i for i in 1..4])", "[1,-1,-1,0]")

testEquals("(m: DIRRING INT := [moebiusMu n for n in 1..]; " _
           " [m.i for i in 1..4])", "[1,-1,-1,0]")
testcase "categories"

testTrue("DIRRING INT has CommutativeRing")

mu: DIRRING FRAC INT := (n: PI): FRAC INT +-> moebiusMu n;
phi: DIRRING FRAC INT := (n: PI): FRAC INT +-> eulerPhi n;
testEquals("[(recip mu * phi).n for n in 1..10]",
           "[(phi * recip mu).n for n in 1..10]")

testTrue("DIRRING FRAC INT has Algebra FRAC INT")

testEquals("[(1/2 * phi).n for n in 1..10]",
           "[eulerPhi n/2  for n in 1..10]");
testcase "identities"

mu: DIRRING INT := (n: PI): INT +-> moebiusMu n;
phi: DIRRING INT := (n: PI): INT +-> eulerPhi n;
testEquals("[(recip mu).n for n in 1..10]", "[1 for n in 1..10]")
testEquals("[(recip mu * phi).n for n in 1..10]", "[n for n in 1..10]")


statistics()
