)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "bugs2011"
testcase "leftRankPolynomial"
QF := Fraction(Integer)
lSM := LieSquareMatrix(2, QF)
x2 := monomial(1,2)$SparseUnivariatePolynomial(Polynomial(QF))
testEquals("leftRankPolynomial()$lSM", "x2")

testcase "wrong convert"
ee1 := sin(cos(15)+4)
testTrue("(map(convert, ee1)$ExpressionFunctions2(Integer, Float); true)")

testcase "nested iteration"
ll:=[[i for i in 1..k] for k in 1..]
testTrue("([reduce(+, [x for x in p]) for p in ll]; true)")

testcase "errors in types"

testLibraryError(
   "UTSSOL(POLY INT, UTS(POLY INT,t,0), UTS(SMPEXPR POLY INT, t, 0))")

testLibraryError(
   "SAE(SAE(FRAC INT, UP(x, FRAC INT), x^2+1), UP(y, FRAC INT), y^3-2)")

testcase "numberOfNormalPoly"

pF := PrimeField(107)
fP := FiniteFieldPolynomialPackage(pF)
testEquals("numberOfNormalPoly(3)$fP", "404496")

testcase "roots of imaginary values"
a := -%i::Complex(Expression(Integer))
a2 := sqrt(a)
a3 := a^(1/3)
testEquals("a2^2", "a")
testEquals("a3^3", "a")

testcase "retraction of rootOf"
pol := x^4+3*x+7
a := rootOf(pol)
ae := a::Expression(Integer)
ar := retractIfCan(ae)@Union(AlgebraicNumber, "failed")
arb := ar case "failed"
testTrue("not(arb)")
testEquals("ar::AlgebraicNumber", "a")

testcase "series of elliptic integrals"
su := series(ellipticF(jacobiSn(u, m), m), u=0)
dsu := su - series(u, u=0)
res1 := reduce(_and, [(coefficient(dsu, i) = 0)@Boolean for i in 1..20])
testTrue("res1")
se1 := series(ellipticE(jacobiSn(u, m), m), u=0)
se2 := integrate(series(jacobiDn(u, m)^2, u=0), u)
ds2 := se1 - se2
res2 := reduce(_and, [(coefficient(ds2, i) = 0)@Boolean for i in 1..20])
testTrue("res2")

testcase "numeric lambertW at 0"

testEquals("lambertW(0.0)", "0.0")
testEquals("lambertW(complex(0.0, 0.0))", "0.0")
testEquals("lambertW(0.0::DoubleFloat)", "0.0")
testEquals("lambertW(0.0::Complex(DoubleFloat))", "0.0")

)set output algebra on
statistics()
