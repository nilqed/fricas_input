
-- Input for page RationalFunctionPage
)clear all

f := (x - y) / (x + y)
numer f
denom f
eval(f, x = 1/x)
eval(f, [x = y, y = x])

-- Input for page AlgebraicFunctionPage
)clear all

f := sqrt(1 + x ^ (1/3))
y := rootOf(y^3 + y^2 - x*y + x^3 - 1, y)
differentiate(y, x)
(y + 1) ^ 3
g := inv f
ratDenom g

-- Input for page OperatorPage
)clear all

R := SQMATRIX(2, INT)
t := operator("tilde")::OP(R)
-- evaluate(t, m +-> transpose m)
evaluate(t, (m : R) : R +-> transpose m)
s:R := matrix [[0, 1], [1, 0]]
rho := t * s
z := rho^4 - 1
m:R := matrix [[1, 2], [3, 4]]
z m
rho m
rho rho m
(rho^3) m
b := t * s - s * t
b m

)cl all
-- This is the recursive definition of the Legendre polynomials
L n ==
  n = 0 => 1
  n = 1 => x
  (2*n-1)/n * x * L(n-1) - (n-1)/n * L(n-2)

L 5

-- Create the differential operator d/dx on Q[x]
dx := operator("D")::OP(POLY FRAC INT)
-- and attach the map d/dx to it:
evaluate(dx, p +-> differentiate(p, 'x))$OP(POLY FRAC INT)

-- This is the differential equation satisfied by the nth Legendre poly:
E n == (1 - x^2) * dx^2 - 2 * x * dx + n*(n+1)
E 5
[L i for i in 1..10]
[E i for i in 1..10]
[(E i)(L i) for i in 1..10]

-- Input for page ElementaryFunctionPage
)clear all

f := x * log y * sin(1/(x+y))
eval(f, [x = y, y = x])
eval(f, log y = acosh(x + sqrt y))

-- Input for page FunctionSimplificationPage
)clear all

f := cos(x)/sec(x) * log(sin(x)^2/(cos(x)^2+sin(x)^2))
g := simplify f
h := sin2csc cos2sec g
expandLog h
f1 := sqrt((x+1)^3)
rootSimp f1
g1 := sin(x + cos x)
g2 := complexElementary g1
trigs g2
h1 := sinh(x + cosh x)
h2 := realElementary h1
htrigs h2

-- Input for page PatternMatchingPage
)clear all

groupSqrt := _rule(sqrt(a) * sqrt(b), sqrt(a*b))
a := sqrt(2) * sqrt(3)
groupSqrt a
a := (sqrt(x) + sqrt(y))^4
groupSqrt a

sinCosExpand := rule
  sin(-x)    == - sin(x)
  cos(-x)    == cos(x)
  sin(x + y) == sin(x) * cos(y) + sin(y) * cos(x)
  cos(x + y) == cos(x) * cos(y) - sin(x) * sin(y)
  sin((n | integer? n and integer n > 1) * x) ==_
       sin(x) * cos((n-1)*x) + sin((n-1)*x) * cos(x)
  cos((n | integer? n and integer n > 1) * x) ==_
       cos(x) * cos((n-1)*x) - sin(x) * sin((n-1)*x)

sinCosExpand(sin(x+y-2*z) * cos y)
