-- =========================
-- DG1 tests (file dg1.spad)
-- =========================
-- Requires:
-- .... CellMap (scmplx.spad).
-- .... SurfaceComplex (scmplx.spad).
-- .... DifferentialForms (dform.spad)
-- .... Fricas 1.3+, or DeRhamComplex patch
-- Version 1.1: 09-ARP-2016
-- Version 1.2: 17-DEC-2016
--
-- FriCAS Computer Algebra System
-- Version: FriCAS 1.3.0
-- Timestamp: Don Sep 29 21:26:01 CEST 2016

)set break resume
)expose UnittestCount UnittestAux Unittest

)expose CMAP, SCMPLX, DFORM

---------------
testsuite "dg1"
---------------
-- ex1
-- ex2
-- ex2.3
-- ex3
-- ex4
-- ex5
-- ex6
-- misc1
-- misc2
-- misc3
-- misc4
-- rudin.ex.10.37

---------------
testcase  "ex1"
---------------

M ==> DG1([r,t],[x,y])
C ==> CellMap(Integer,2)

-- https://www.mathi.uni-heidelberg.de/~lee/Stehpan_Sven.pdf
-- Example 2.11
f:=cellMap([0..R,0..2*%pi],q+->[q.1*cos(q.2),q.1*sin(q.2)])$C

X:=indVars()$M
Y:=depVars()$M
dX:=indForms()$M
dY:=depForms()$M

w:=1/(Y.1^2+Y.2^2)*(-Y.2*dY.1+Y.1*dY.2)

r1:=pullBack(f,w)$M -- dt
testEquals("r1","dX.2")

f X --> polar coords

r2:=integrate(dY.1*dY.2,f)$M -- R^2*%pi = area of disk with radius R.
testEquals("r2","R^2*%pi")
 
r3:=pullBack(f,dY.1*dY.2)$M -- r dr dt
r3:=simplify(leadingCoefficient(r3))*leadingBasisTerm(r3)
testEquals("r3","X.1*dX.1*dX.2")

-- http://www.math.pitt.edu/~sph/1540/1540-notes14.pdf
-- Example 4
g:=cellMap([0..1,0..1],q+->[2*q.1+3*q.2,27*q.2^3])$C
r4:=integrate(dY.1*dY.2,g)$M -- 54
testEquals("r4","54")

--
h:=cellMap([0..1,0..1],q+->[q.1^2-q.2^2,2*q.1*q.2])$C
r5:=pullBack(h,dY.1*dY.2)$M -- 4(t^2+r^2)dr dt
testEquals("r5","4*(X.1^2+X.2^2)*dX.1*dX.2")

---------------
testcase  "ex2"
---------------
-- verified examples                  
-- http://www.maplesoft.com/support/help/Maple/view.aspx?path=
-- DifferentialGeometry/Pullback

-- Example 1

M ==> DG1([x,y],[u,v,w])
C ==> CellMap(Integer,3)

Y:=depVars()$M
X:=indVars()$M
dY:=depForms()$M
dX:=indForms()$M

Phi1:=cellMap([0..1,0..1],q+->[q.1+2*q.2,3*q.1+4*q.2,5*q.1+6*q.2])$C

w1:=Y.2*dY.1+Y.3*dY.2+Y.1*dY.3

th1:=pullBack(Phi1,w1)$M --  (44y + 32x)dy + (32y + 23x)dx
testEquals("th1","(44*X.2+32*X.1)*dX.2+(32*X.2+23*X.1)*dX.1")

-- todo: eval, simplify

-- Example 2
r:=[pullBack(Phi1,s)$M for s in [dY.1,dY.2]]
testEquals("r","[2*dX.2+dX.1,4*dX.2+3*dX.1]")

---------------
testcase  "ex2.3"
---------------
M ==> DG1([r,t,p],[x,y,z])
C ==> CellMap(Integer,3)

X:=indVars()$M
Y:=depVars()$M
dX:=indForms()$M
dY:=depForms()$M

f2:=(Y.1^2+Y.2^2+Y.3^2)*1$typeOf(dY.1)

w2:=Y.3*dY.1*dY.2 - Y.2*dY.1*dY.3 + Y.1 * dY.2*dY.3

Phi2:=Phi1:=cellMap([0..1,0..1],q+->[X.1*cos(X.2)*sin(X.3),X.1*sin(X.2)*sin(X.3),X.1*cos(X.3)])$C

r1:=pullBack([Y.1=X.1*cos(X.2)*sin(X.3),Y.2=X.1*sin(X.2)*sin(X.3),Y.3=X.1*cos(X.3)],f2)$M
r2:=simplify(retract r1) -- r^2
testEquals("r2","X.1^2")

r3:=pullBack([Y.1=X.1*cos(X.2)*sin(X.3),Y.2=X.1*sin(X.2)*sin(X.3),Y.3=X.1*cos(X.3)],w2)$M
r4:=simplify leadingCoefficient(r3) -- -r^3*sin(p) dt dp 
testEquals("r4*leadingBasisTerm(r3)","-X.1^3*sin(X.3)*dX.2*dX.3")


---------------
testcase  "ex3"
---------------
-- verified examples
-- http://www.math.uiuc.edu/~kapovich/423-15/pullback.pdf
-- Example 0.5

-- F:R3 --> R2, (x,y,z) |-> (x²+y*z,exp(x*y*z))
-- cannot use cellMap because p>n
M ==> DG1([x,y,z],[u,v])
X:=indVars()$M
U:=depVars()$M
dX:=indForms()$M
dU:=depForms()$M

v:=pullBack([U.1=X.1^2+X.2*X.3,U.2=exp(X.1*X.2*X.3)], U.1*U.2^3*dU.1*dU.2)$M

--expected
ve:=exp(4*X.1*X.2*X.3)*(X.1^2+X.2*X.3)*((2*X.1^2*X.3-X.2*X.3^2)*dX.1*dX.2+_
    (2*X.1^2*X.2-X.2^2*X.3)*dX.1*dX.3)

-- we claim that v = ve
-- test -> false, but we can simplify:
D:=v-ve
testEquals("simplify coefficient(D,dX.1*dX.2)","0")
testEquals("simplify coefficient(D,dX.1*dX.3)","0")


---------------
testcase  "ex4"
---------------
-- verified examples
-- https://www.maplesoft.com/support/help/Maple/
-- view.aspx?path=DifferentialGeometry/IntegrateForm 
-- Example 2


M ==> DG1([t],[x,y,z])
CM ==> CellMap(INT,3)
[t]:=indVars()$M
[x,y,z]:=depVars()$M
[dt]:=indForms()$M
[dx,dy,dz]:=depForms()$M

Phi:=cellMap([0..%pi],q+->[sin(q.1)*cos(q.1),sin(q.1)*cos(q.1),exp(q.1)])$CM
om:=y^2*dx + z^2*dy + x*y*z*dz

r:=integrate(om,Phi)$M  -- -3/10 + 3/10 * exp(2*%pi) 
testEquals("r","-(3/10) + (3/10) * exp(%pi)^2")


---------------
testcase  "ex5"
---------------
-- verified examples
-- https://www.maplesoft.com/support/help/Maple/
-- view.aspx?path=DifferentialGeometry/IntegrateForm 
-- Example 3
-- Note: w in first line of text is not the same as effectively used !!
-- wrote a 

M ==> DG1([t,p],[x,y,z])
CM ==> CellMap(INT,3)
[t,p]:=indVars()$M
[x,y,z]:=depVars()$M
[dt,dp]:=indForms()$M
[dx,dy,dz]:=depForms()$M

Phi:=cellMap([0..2*%pi,0..%pi],q+->[cos(q.1)*sin(q.2),2*sin(q.1)*sin(q.2),3*cos(q.2)])$CM
om:=-3*y^2*z*dx*dy + x*z^2*dy*dz - x^2*y*dx*dz

r:=integrate(om,Phi)$M  --  16/5 * %pi
testEquals("r","16/5 * %pi")

---------------
testcase  "ex6"
---------------
-- verified examples
-- https://www.maplesoft.com/support/help/Maple/
-- view.aspx?path=DifferentialGeometry/IntegrateForm 
-- Example 1

M ==> DG1([u,v],[x,y])
[x,y]:=depVars()$M
[dx,dy]:=depForms()$M

U:=indVars()$M
dU:=indForms()$M

om:=(x^2+3*x*y)*dx*dy 

r1:=multipleIntegral(leadingCoefficient(om),['x,'y],[0..1-y,0..1])$M  --  5/24
testEquals("r1","5/24")

-- ok, but not user friendly ...


-- Example 3.9 / Manifolds and Differential Forms, Reyer Sjamaar
-- URL: http://www.math.cornell.edu/~sjamaar
[u,v]:=indVars()$M
[du,dv]:=indForms()$M
r2:=pullBack([x=u^3*v,y=log(u+v)],dx*dy)$M  -- ok

testEquals("r2","(3*U.1^2*U.2-U.1^3)/(U.1+U.2)*dU.1*dU.2")

-----------------
testcase  "misc1"
-----------------
M ==> DG1([x,y],[u,v,w])

dX:=indForms()$M
dU:=depForms()$M

X:=indVars()$M
U:=depVars()$M

XS:=indSymbols()$M
US:=depSymbols()$M

--
a:=operator 'a
f1:=a(U.1,U.2)*dU.1
d f1 
testEquals("d f1","- D(a(U.1,U.2),US.2)*dU.1*dU.2")


F:=cellMap([0..1,0..1],q+->[q.2,-q.1,sin(q.1*q.2)])$CellMap(INT,3)
Y:=F indVars()$M --
r1:=pullBack(F,dU.1)$M
testEquals("r1","dX.2")

DERX==>DERHAM(INT,indSymbols()$M)
DERU==>DERHAM(INT,depSymbols()$M)
1$DERX
[d (s*1$DERX) for s in Y]

f:=a(u,v)*dU.1*dU.3
lf:=leadingBasisTerm(f)
lc:=leadingCoefficient(f)
abt:=atomizeBasisTerm(lf)
bf:=baseForms()$DFORM(INT,depVars()$M)
[position(x,bf) for x in abt] 

r2:=pullBack(F,f)$M --  - y a(y,- x)cos(x y)dx dy
testEquals("r2","-X.2*a(X.2,-X.1)*cos(X.1*X.2)*dX.1*dX.2")

r3:=pullBack(F,dU.1*dU.2*dU.3)$M -- 0
r4:=pullBack(F,dU.1*dU.2)$M -- dx dy
r5:=pullBack(F,dU.1*dU.3)$M -- - y cos(x y)dx dy

testEquals("r3","0")
testEquals("r4","dX.1*dX.2")
testEquals("r5","-X.2*cos(X.1*X.2)*dX.1*dX.2")

r6:=pullBack(F,dU.1+f*tan((depVars()$M).2))$M
e6:=dX.2-X.2*a(X.2,-X.1)*cos(X.1*X.2)*tan(-X.1)*dX.1*dX.2
testEquals("simplify leadingCoefficient(r6-e6)","0")

r7:=pullBack(F,1$DERU)$M
r8:=pullBack(F,a(u)*1$DERU)$M
r9:=pullBack(F,a(u,v)*1$DERU)$M
r10:=pullBack(F,a(u,v,w)*1$DERU)$M
r11:=pullBack(F,0$DERU)$M

testEquals("r7","1")
testEquals("r8","a(X.2)")
testEquals("r9","a(X.2,-X.1)")
testEquals("r10","a(X.2,-X.1,sin(X.1*X.2))")
testEquals("r11","0")



G:=cellMap([0..1,0..1],q+->[q.1^2,q.2^2,1])$CellMap(INT,3)
r12:=pullBack(G,dU.1*dU.2)$M -- 4x y dx dy
testEquals("r12","4*X.1*X.2*dX.1*dX.2")

R==>EXPR INT
MI:=multipleIntegral(x*y::R,['x,'y::Symbol],[1..2,3..4::R])$M -- 21/4
IG:=integrate(dU.1*dU.2,G)$M -- 1

testEquals("MI","21/4")
testEquals("IG","1")

-----------------
testcase  "misc2"
-----------------
R==>EXPR INT
-- 3-cell [0,a]x[0,2*pi]x[0,2*%pi]
Q:=[0..a::R,0..2*%pi,0..2*%pi]

-- H mapping [Z.1,Z.2,Z.3H] -> [x,y,z]
H0:List R -> List R
H0:=Z+->[Z.1*cos(Z.2),(b+Z.1*sin(Z.2))*cos(Z.3),(b+Z.1*sin(Z.2))*sin(Z.3)]
H:=cellMap(Q,H0)$CellMap(INT,3)

M2 ==> DG1([x,y,z],[u,v,w])
DERX==>DERHAM(INT,indSymbols()$M2)
DERU==>DERHAM(INT,depSymbols()$M2)

dX:=indForms()$M2
dU:=depForms()$M2

X:=indVars()$M2
U:=depVars()$M2

XS:=indSymbols()$M2
US:=depSymbols()$M2   

r1:=pullBack(H,1$DERU)$M2
testEquals("r1","1")

vf:=pullBack(H,dU.1*dU.2*dU.3)$M2

r2:=simplify leadingCoefficient(vf)  -- cmp. Rudin Example 10.47 (SCMPLX)
testEquals("r2","X.1^2*sin(X.2)+b*X.1")

r3:=pullBack(H,u*1$DERU)$M2
r4:=pullBack(H,v*1$DERU)$M2
r5:=pullBack(H,w*1$DERU)$M2
r6:=pullBack(H,u*v*w*1$DERU)$M2

testEquals("r3","X.1*cos(X.2)")
testEquals("r4","X.1*cos(X.3)*sin(X.2)+b*cos(X.3)")
testEquals("r5","(X.1*sin(X.2)+b)*sin(X.3)")

-----------------
testcase  "misc3"
-----------------
-- F:R3 --> R2, (x,y,z) |-> (x²+y*z,exp(x*y*z))
-- cannot use cellMap because p>n
N1 ==> DG1([x,y,z],[u,v])
X:=indVars()$N1
U:=depVars()$N1
XS:=indSymbols()$N1
US:=depSymbols()$N1
dX:=indForms()$N1
dU:=depForms()$N1
exN1:=pullBack([U.1=X.1^2+X.2*X.3,U.2=exp(X.1*X.2*X.3)], U.1*U.2^3*dU.1*dU.2)$N1
--expected
rN1:=exp(4*X.1*X.2*X.3)*(X.1^2+X.2*X.3)*((2*X.1^2*X.3-X.2*X.3^2)*dX.1*dX.2+_
    (2*X.1^2*X.2-X.2^2*X.3)*dX.1*dX.3)

-- we claim that exN1 = rN1
-- test -> false, but we can simplify:
D:=exN1-rN1
testEquals("simplify coefficient(D,dX.1*dX.2)","0")
testEquals("simplify coefficient(D,dX.1*dX.3)","0")

R ==> EXPR INT
T:BOP:=operator 'T
r1:=pullBack([U.1=X.1,U.2=T(X.1,X.2,X.3)], dU.2)$N1
r2:=pullBack([U.1=X.1,U.2=T(X.1*X.2*X.3)], dU.2)$N1

testEquals("r1","D(T X,XS.1)$R*dX.1+D(T X,XS.2)$R*dX.2+D(T X,XS.3)$R*dX.3")

TP:=T(X.1*X.2*X.3)
testEquals("r2","D(TP,XS.1)$R*dX.1+D(TP,XS.2)$R*dX.2+D(TP,XS.3)$R*dX.3")

-----------------
testcase  "misc4"
-----------------
N2 ==> DG1([x,y],[u,v,w])
X:=indVars()$N2
U:=depVars()$N2
dX:=indForms()$N2
dU:=depForms()$N2

F:=cellMap([0..1,0..1],q+->[q.2,-q.1,sin(q.1*q.2)])$CellMap(INT,3)
G:=cellMap([0..1,0..1],q+->[q.1^2,q.2^2,1])$CellMap(INT,3)

SC:=F::SCMPLX(INT,3) + 2*G::SCMPLX(INT,3)
terms(SC)
bSC:=bdry SC
terms bSC

r1:=pullBack(F,dU.1*dU.2)$N2  -- dx dx
testEquals("r1","dX.1*dX.2")

r2:=pullBack(G,dU.1*dU.2)$N2  -- 4 x y dx dy
testEquals("r2","4*X.1*X.2*dX.1*dX.2")

r3:=pullBack(SC,dU.1*dU.2)$N2  -- 2 G + F -> (8 x y + 1) dx dy
testEquals("r3","(8*X.1*X.2+1)*dX.1*dX.2")

N3 ==> DG1([x],[u,v,w])
XX:=indVars()$N3
UU:=depVars()$N3
dXX:=indForms()$N3
dUU:=depForms()$N3
r4:=pullBack(bdry SC, UU.1*dUU.2)$N3 --> (4 x + 1) dx
testEquals("r4","(4*XX.1+1)*dXX.1")

-- Green's theorem
r5:=integrate(UU.1*dUU.2,bdry SC)$N3 -- =3
r6:=integrate(d(U.1*dU.2), SC)$N2 -- =3    

testEquals("r5","3")
testEquals("r6","3")


-- Examples dg1.tex
M ==> DG1([x,y],[u,v,w])
    
CM3 ==> CellMap(INT,3)
[x,y]:=indVars()$M
[u,v,w]:=depVars()$M
[dx,dy]:=indForms()$M
[du,dv,dw]:=depForms()$M

Q:=[0..2*%pi,0..%pi]
Phi:=cellMap(Q,q+->[cos(q.1)*sin(q.2),2*sin(q.1)*sin(q.2),3*cos(q.2)])$CM3
om:=-3*v^2*w*du*dv + u*w^2*dv*dw - u^2*v*du*dw

r7:=integrate(om,Phi)$M  --  16/5 * %pi
testEquals("r7","16/5*%pi")

-----------------
testcase  "misc5"
-----------------
N4 ==> DG1([x[0],x[1],x[2]],[y[1],y[2],y[3],y[4]])

CM4 ==> CellMap(INT,4)
X:=indVars()$N4
U:=depVars()$N4
dX:=indForms()$N4
dU:=depForms()$N4

Q:=[0..1,0..1,0..1]
Phi:=cellMap(Q,q+->[q.1,q.2,q.3,1])$CM4
om:=dU.1*dU.2*dU.3

r8:=integrate(om,Phi)$N4 
testEquals("r8","1")

--------------------------
testcase  "rudin.ex.10.37"
--------------------------
M ==> DG1([u,v],[x,y,z])
CM ==> CellMap(INT,3)
[u,v]:=indVars()$M
[x,y,z]:=depVars()$M
[du,dv]:=indForms()$M
[dx,dy,dz]:=depForms()$M

Q:=[0..%pi,0..2*%pi]
S:=cellMap(Q,q+->[sin(q.1)*cos(q.2),sin(q.1)*sin(q.2),cos(q.1)])$CM

zeta:=(x*dy*dz+y*dz*dx+z*dx*dy)*(x^2+y^2+z^2)^(-3/2)

testEquals("d zeta","0") -- 0

-- integrate(zeta,S)$M --> cannot integrate :(

r1:=pullBack(S,zeta)$M
r2:=simplify leadingCoefficient(r1)
testEquals("r2","sin(u)")  
-- simplifiying seems to be important for integrate.
-- todo: simplify -> integrate

szeta:=r2*du*dv
r3:=multipleIntegral(r2,['u,'v],Q)$M -- 4*%pi
testEquals("r3","4*%pi")  -- showing zeta not exact !

-------------
-- Results --
-------------
)version
)lisp (lisp-implementation-type)
)lisp (lisp-implementation-version)


statistics()

